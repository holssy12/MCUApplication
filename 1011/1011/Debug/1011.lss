
1011.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014cc  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c8c  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000093a  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f5  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d49  00000000  00000000  000034bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00004206  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	52 d0       	rcall	.+164    	; 0x19a <main>
  f6:	5b c0       	rjmp	.+182    	; 0x1ae <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <project_1>:
		//PORTC = 0x0F;
		//PORTA = 0xF0;
		//_delay_ms(500);	// 전체 led off
	//}
	
		for (int j=0; j<8; j++) {
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	49 c0       	rjmp	.+146    	; 0x192 <project_1+0x98>
			for(int i=0; i<_sh; i++) {
				PORTC = ~(0x01 << i);
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	06 2e       	mov	r0, r22
 106:	02 c0       	rjmp	.+4      	; 0x10c <project_1+0x12>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <project_1+0xe>
 110:	20 95       	com	r18
 112:	28 b9       	out	0x08, r18	; 8
				PORTA = PORTC;
 114:	28 b1       	in	r18, 0x08	; 8
 116:	22 b9       	out	0x02, r18	; 2
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 118:	28 e8       	ldi	r18, 0x88	; 136
 11a:	33 e1       	ldi	r19, 0x13	; 19
 11c:	06 c0       	rjmp	.+12     	; 0x12a <project_1+0x30>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11e:	e0 e9       	ldi	r30, 0x90	; 144
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <project_1+0x28>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 126:	21 50       	subi	r18, 0x01	; 1
 128:	31 09       	sbc	r19, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12a:	21 15       	cp	r18, r1
 12c:	31 05       	cpc	r19, r1
 12e:	b9 f7       	brne	.-18     	; 0x11e <project_1+0x24>
		//PORTA = 0xF0;
		//_delay_ms(500);	// 전체 led off
	//}
	
		for (int j=0; j<8; j++) {
			for(int i=0; i<_sh; i++) {
 130:	6f 5f       	subi	r22, 0xFF	; 255
 132:	7f 4f       	sbci	r23, 0xFF	; 255
 134:	02 c0       	rjmp	.+4      	; 0x13a <project_1+0x40>
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	68 17       	cp	r22, r24
 13c:	79 07       	cpc	r23, r25
 13e:	04 f3       	brlt	.-64     	; 0x100 <project_1+0x6>
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	21 c0       	rjmp	.+66     	; 0x188 <project_1+0x8e>
				PORTA = PORTC;
				_delay_ms(500);
			}
			
			for(int i=0; i<_sh; i++) {
				PORTC = ~((0x01 << (_sh-1)) >> i);
 146:	fc 01       	movw	r30, r24
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <project_1+0x5a>
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	ea 95       	dec	r30
 156:	e2 f7       	brpl	.-8      	; 0x150 <project_1+0x56>
 158:	06 2e       	mov	r0, r22
 15a:	02 c0       	rjmp	.+4      	; 0x160 <project_1+0x66>
 15c:	35 95       	asr	r19
 15e:	27 95       	ror	r18
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <project_1+0x62>
 164:	20 95       	com	r18
 166:	28 b9       	out	0x08, r18	; 8
				PORTA = PORTC;
 168:	28 b1       	in	r18, 0x08	; 8
 16a:	22 b9       	out	0x02, r18	; 2
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 16c:	28 e8       	ldi	r18, 0x88	; 136
 16e:	33 e1       	ldi	r19, 0x13	; 19
 170:	06 c0       	rjmp	.+12     	; 0x17e <project_1+0x84>
 172:	e0 e9       	ldi	r30, 0x90	; 144
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <project_1+0x7c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	31 09       	sbc	r19, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	21 15       	cp	r18, r1
 180:	31 05       	cpc	r19, r1
 182:	b9 f7       	brne	.-18     	; 0x172 <project_1+0x78>
				PORTC = ~(0x01 << i);
				PORTA = PORTC;
				_delay_ms(500);
			}
			
			for(int i=0; i<_sh; i++) {
 184:	6f 5f       	subi	r22, 0xFF	; 255
 186:	7f 4f       	sbci	r23, 0xFF	; 255
 188:	68 17       	cp	r22, r24
 18a:	79 07       	cpc	r23, r25
 18c:	e4 f2       	brlt	.-72     	; 0x146 <project_1+0x4c>
		//PORTC = 0x0F;
		//PORTA = 0xF0;
		//_delay_ms(500);	// 전체 led off
	//}
	
		for (int j=0; j<8; j++) {
 18e:	4f 5f       	subi	r20, 0xFF	; 255
 190:	5f 4f       	sbci	r21, 0xFF	; 255
 192:	48 30       	cpi	r20, 0x08	; 8
 194:	51 05       	cpc	r21, r1
 196:	7c f2       	brlt	.-98     	; 0x136 <project_1+0x3c>
				PORTA = PORTC;
				_delay_ms(500);
			}
		}
	
}
 198:	08 95       	ret

0000019a <main>:

int main(void) {
	DDRC=0x0F;
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	87 b9       	out	0x07, r24	; 7
	DDRA=0xF0;
 19e:	80 ef       	ldi	r24, 0xF0	; 240
 1a0:	81 b9       	out	0x01, r24	; 1
	// led_all_onoff(3, 300);
	// alternate_led_onoff();
	// alternate_led_onoff_with_parameter(0x55, 3, 500);
	// one_s_complement_after_shift();
	// one_s_complement_after_shift_new(6,100);
	project_1(8);
 1a2:	88 e0       	ldi	r24, 0x08	; 8
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	a9 df       	rcall	.-174    	; 0xfa <project_1>
}
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
