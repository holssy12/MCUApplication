
Practice_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001037  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c3f  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000069e  00000000  00000000  000025ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  00002c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b2  00000000  00000000  00002e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008c9  00000000  00000000  00003426  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00003cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	19 c2       	rjmp	.+1074   	; 0x440 <__vector_3>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c2       	rjmp	.+1156   	; 0x49e <__vector_6>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	67 c2       	rjmp	.+1230   	; 0x4fc <__vector_11>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	36 d2       	rcall	.+1132   	; 0x562 <main>
  f6:	99 c3       	rjmp	.+1842   	; 0x82a <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <led_all>:
#define F_CPU 16000000UL
#define FOSC  16000000UL
#include <util/delay.h>
#include <avr/interrupt.h>

void led_all(unsigned int _s) {
  fa:	8f 92       	push	r8
  fc:	9f 92       	push	r9
  fe:	af 92       	push	r10
 100:	bf 92       	push	r11
 102:	cf 92       	push	r12
 104:	df 92       	push	r13
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	8c 01       	movw	r16, r24
	for(int i=0; i<3; i++){
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d0 e0       	ldi	r29, 0x00	; 0
 118:	6b c0       	rjmp	.+214    	; 0x1f0 <led_all+0xf6>
		PORTC = 0x00;
 11a:	18 b8       	out	0x08, r1	; 8
		_delay_ms(_s);
 11c:	b8 01       	movw	r22, r16
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	6a d2       	rcall	.+1236   	; 0x5f8 <__floatunsisf>
 124:	4b 01       	movw	r8, r22
 126:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	4a e7       	ldi	r20, 0x7A	; 122
 12e:	55 e4       	ldi	r21, 0x45	; 69
 130:	f1 d2       	rcall	.+1506   	; 0x714 <__mulsf3>
 132:	6b 01       	movw	r12, r22
 134:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e8       	ldi	r20, 0x80	; 128
 13c:	5f e3       	ldi	r21, 0x3F	; 63
 13e:	2c d2       	rcall	.+1112   	; 0x598 <__cmpsf2>
 140:	88 23       	and	r24, r24
 142:	04 f1       	brlt	.+64     	; 0x184 <led_all+0x8a>
		__ticks = 1;
	else if (__tmp > 65535)
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	3f ef       	ldi	r19, 0xFF	; 255
 148:	4f e7       	ldi	r20, 0x7F	; 127
 14a:	57 e4       	ldi	r21, 0x47	; 71
 14c:	c7 01       	movw	r24, r14
 14e:	b6 01       	movw	r22, r12
 150:	dd d2       	rcall	.+1466   	; 0x70c <__gesf2>
 152:	18 16       	cp	r1, r24
 154:	9c f4       	brge	.+38     	; 0x17c <led_all+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	40 e2       	ldi	r20, 0x20	; 32
 15c:	51 e4       	ldi	r21, 0x41	; 65
 15e:	c5 01       	movw	r24, r10
 160:	b4 01       	movw	r22, r8
 162:	d8 d2       	rcall	.+1456   	; 0x714 <__mulsf3>
 164:	1d d2       	rcall	.+1082   	; 0x5a0 <__fixunssfsi>
 166:	06 c0       	rjmp	.+12     	; 0x174 <led_all+0x7a>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 168:	80 e9       	ldi	r24, 0x90	; 144
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <led_all+0x72>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 170:	61 50       	subi	r22, 0x01	; 1
 172:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 174:	61 15       	cp	r22, r1
 176:	71 05       	cpc	r23, r1
 178:	b9 f7       	brne	.-18     	; 0x168 <led_all+0x6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 17a:	09 c0       	rjmp	.+18     	; 0x18e <led_all+0x94>
 17c:	c7 01       	movw	r24, r14
 17e:	b6 01       	movw	r22, r12
 180:	0f d2       	rcall	.+1054   	; 0x5a0 <__fixunssfsi>
 182:	02 c0       	rjmp	.+4      	; 0x188 <led_all+0x8e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	cb 01       	movw	r24, r22
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <led_all+0x90>
		PORTC = 0xFF;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 190:	88 b9       	out	0x08, r24	; 8
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	40 e8       	ldi	r20, 0x80	; 128
 198:	5f e3       	ldi	r21, 0x3F	; 63
 19a:	c7 01       	movw	r24, r14
 19c:	b6 01       	movw	r22, r12
 19e:	fc d1       	rcall	.+1016   	; 0x598 <__cmpsf2>
 1a0:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 1a2:	04 f1       	brlt	.+64     	; 0x1e4 <led_all+0xea>
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	3f ef       	ldi	r19, 0xFF	; 255
 1a8:	4f e7       	ldi	r20, 0x7F	; 127
 1aa:	57 e4       	ldi	r21, 0x47	; 71
 1ac:	c7 01       	movw	r24, r14
 1ae:	b6 01       	movw	r22, r12
 1b0:	ad d2       	rcall	.+1370   	; 0x70c <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b2:	18 16       	cp	r1, r24
 1b4:	9c f4       	brge	.+38     	; 0x1dc <led_all+0xe2>
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e2       	ldi	r20, 0x20	; 32
 1bc:	51 e4       	ldi	r21, 0x41	; 65
 1be:	c5 01       	movw	r24, r10
 1c0:	b4 01       	movw	r22, r8
 1c2:	a8 d2       	rcall	.+1360   	; 0x714 <__mulsf3>
 1c4:	ed d1       	rcall	.+986    	; 0x5a0 <__fixunssfsi>
 1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <led_all+0xda>
 1c8:	80 e9       	ldi	r24, 0x90	; 144
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <led_all+0xd2>
 1d0:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d2:	71 09       	sbc	r23, r1
 1d4:	61 15       	cp	r22, r1
 1d6:	71 05       	cpc	r23, r1
 1d8:	b9 f7       	brne	.-18     	; 0x1c8 <led_all+0xce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <led_all+0xf4>
 1dc:	c7 01       	movw	r24, r14
 1de:	b6 01       	movw	r22, r12
 1e0:	df d1       	rcall	.+958    	; 0x5a0 <__fixunssfsi>
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <led_all+0xee>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	cb 01       	movw	r24, r22
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <led_all+0xf0>
#define FOSC  16000000UL
#include <util/delay.h>
#include <avr/interrupt.h>

void led_all(unsigned int _s) {
	for(int i=0; i<3; i++){
 1ee:	21 96       	adiw	r28, 0x01	; 1
 1f0:	c3 30       	cpi	r28, 0x03	; 3
 1f2:	d1 05       	cpc	r29, r1
 1f4:	0c f4       	brge	.+2      	; 0x1f8 <led_all+0xfe>
 1f6:	91 cf       	rjmp	.-222    	; 0x11a <led_all+0x20>
		PORTC = 0x00;
		_delay_ms(_s);
		PORTC = 0xFF;
		_delay_ms(_s);
	}
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	bf 90       	pop	r11
 20a:	af 90       	pop	r10
 20c:	9f 90       	pop	r9
 20e:	8f 90       	pop	r8
 210:	08 95       	ret

00000212 <led_alternating>:

void led_alternating(unsigned int _s){
 212:	8f 92       	push	r8
 214:	9f 92       	push	r9
 216:	af 92       	push	r10
 218:	bf 92       	push	r11
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	8c 01       	movw	r16, r24
	for(int i=0; i<3; i++){
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	6c c0       	rjmp	.+216    	; 0x30a <led_alternating+0xf8>
		PORTC = 0xAA;
 232:	8a ea       	ldi	r24, 0xAA	; 170
 234:	88 b9       	out	0x08, r24	; 8
		_delay_ms(_s);
 236:	b8 01       	movw	r22, r16
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	dd d1       	rcall	.+954    	; 0x5f8 <__floatunsisf>
 23e:	4b 01       	movw	r8, r22
 240:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	4a e7       	ldi	r20, 0x7A	; 122
 248:	55 e4       	ldi	r21, 0x45	; 69
 24a:	64 d2       	rcall	.+1224   	; 0x714 <__mulsf3>
 24c:	6b 01       	movw	r12, r22
 24e:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	40 e8       	ldi	r20, 0x80	; 128
 256:	5f e3       	ldi	r21, 0x3F	; 63
 258:	9f d1       	rcall	.+830    	; 0x598 <__cmpsf2>
 25a:	88 23       	and	r24, r24
 25c:	04 f1       	brlt	.+64     	; 0x29e <led_alternating+0x8c>
		__ticks = 1;
	else if (__tmp > 65535)
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	3f ef       	ldi	r19, 0xFF	; 255
 262:	4f e7       	ldi	r20, 0x7F	; 127
 264:	57 e4       	ldi	r21, 0x47	; 71
 266:	c7 01       	movw	r24, r14
 268:	b6 01       	movw	r22, r12
 26a:	50 d2       	rcall	.+1184   	; 0x70c <__gesf2>
 26c:	18 16       	cp	r1, r24
 26e:	9c f4       	brge	.+38     	; 0x296 <led_alternating+0x84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e2       	ldi	r20, 0x20	; 32
 276:	51 e4       	ldi	r21, 0x41	; 65
 278:	c5 01       	movw	r24, r10
 27a:	b4 01       	movw	r22, r8
 27c:	4b d2       	rcall	.+1174   	; 0x714 <__mulsf3>
 27e:	90 d1       	rcall	.+800    	; 0x5a0 <__fixunssfsi>
 280:	06 c0       	rjmp	.+12     	; 0x28e <led_alternating+0x7c>
 282:	80 e9       	ldi	r24, 0x90	; 144
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <led_alternating+0x74>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28a:	61 50       	subi	r22, 0x01	; 1
 28c:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28e:	61 15       	cp	r22, r1
 290:	71 05       	cpc	r23, r1
 292:	b9 f7       	brne	.-18     	; 0x282 <led_alternating+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 294:	09 c0       	rjmp	.+18     	; 0x2a8 <led_alternating+0x96>
 296:	c7 01       	movw	r24, r14
 298:	b6 01       	movw	r22, r12
 29a:	82 d1       	rcall	.+772    	; 0x5a0 <__fixunssfsi>
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <led_alternating+0x90>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	cb 01       	movw	r24, r22
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <led_alternating+0x92>
		PORTC = ~0xAA;
 2a8:	85 e5       	ldi	r24, 0x55	; 85
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 2aa:	88 b9       	out	0x08, r24	; 8
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 e8       	ldi	r20, 0x80	; 128
 2b2:	5f e3       	ldi	r21, 0x3F	; 63
 2b4:	c7 01       	movw	r24, r14
 2b6:	b6 01       	movw	r22, r12
 2b8:	6f d1       	rcall	.+734    	; 0x598 <__cmpsf2>
 2ba:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 2bc:	04 f1       	brlt	.+64     	; 0x2fe <led_alternating+0xec>
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	3f ef       	ldi	r19, 0xFF	; 255
 2c2:	4f e7       	ldi	r20, 0x7F	; 127
 2c4:	57 e4       	ldi	r21, 0x47	; 71
 2c6:	c7 01       	movw	r24, r14
 2c8:	b6 01       	movw	r22, r12
 2ca:	20 d2       	rcall	.+1088   	; 0x70c <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2cc:	18 16       	cp	r1, r24
 2ce:	9c f4       	brge	.+38     	; 0x2f6 <led_alternating+0xe4>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e2       	ldi	r20, 0x20	; 32
 2d6:	51 e4       	ldi	r21, 0x41	; 65
 2d8:	c5 01       	movw	r24, r10
 2da:	b4 01       	movw	r22, r8
 2dc:	1b d2       	rcall	.+1078   	; 0x714 <__mulsf3>
 2de:	60 d1       	rcall	.+704    	; 0x5a0 <__fixunssfsi>
 2e0:	06 c0       	rjmp	.+12     	; 0x2ee <led_alternating+0xdc>
 2e2:	80 e9       	ldi	r24, 0x90	; 144
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <led_alternating+0xd4>
 2ea:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ec:	71 09       	sbc	r23, r1
 2ee:	61 15       	cp	r22, r1
 2f0:	71 05       	cpc	r23, r1
 2f2:	b9 f7       	brne	.-18     	; 0x2e2 <led_alternating+0xd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2f4:	09 c0       	rjmp	.+18     	; 0x308 <led_alternating+0xf6>
 2f6:	c7 01       	movw	r24, r14
 2f8:	b6 01       	movw	r22, r12
 2fa:	52 d1       	rcall	.+676    	; 0x5a0 <__fixunssfsi>
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <led_alternating+0xf0>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	cb 01       	movw	r24, r22
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <led_alternating+0xf2>
		_delay_ms(_s);
	}
}

void led_alternating(unsigned int _s){
	for(int i=0; i<3; i++){
 308:	21 96       	adiw	r28, 0x01	; 1
 30a:	c3 30       	cpi	r28, 0x03	; 3
 30c:	d1 05       	cpc	r29, r1
 30e:	0c f4       	brge	.+2      	; 0x312 <led_alternating+0x100>
 310:	90 cf       	rjmp	.-224    	; 0x232 <led_alternating+0x20>
		PORTC = 0xAA;
		_delay_ms(_s);
		PORTC = ~0xAA;
		_delay_ms(_s);
	}
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	df 90       	pop	r13
 320:	cf 90       	pop	r12
 322:	bf 90       	pop	r11
 324:	af 90       	pop	r10
 326:	9f 90       	pop	r9
 328:	8f 90       	pop	r8
 32a:	08 95       	ret

0000032c <led_shift>:

void led_shift(unsigned int _s){
 32c:	4f 92       	push	r4
 32e:	5f 92       	push	r5
 330:	6f 92       	push	r6
 332:	7f 92       	push	r7
 334:	8f 92       	push	r8
 336:	9f 92       	push	r9
 338:	af 92       	push	r10
 33a:	bf 92       	push	r11
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	8c 01       	movw	r16, r24
	unsigned int val;
	int i;
	for(int j=0; j<3; j++){
 34a:	e1 2c       	mov	r14, r1
 34c:	f1 2c       	mov	r15, r1
 34e:	64 c0       	rjmp	.+200    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		
		if(j==0) i=0;
 350:	e1 14       	cp	r14, r1
 352:	f1 04       	cpc	r15, r1
 354:	19 f4       	brne	.+6      	; 0x35c <led_shift+0x30>
 356:	c0 e0       	ldi	r28, 0x00	; 0
 358:	d0 e0       	ldi	r29, 0x00	; 0
 35a:	57 c0       	rjmp	.+174    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		else i=1;
 35c:	c1 e0       	ldi	r28, 0x01	; 1
 35e:	d0 e0       	ldi	r29, 0x00	; 0
 360:	54 c0       	rjmp	.+168    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		
		for( ; i<15; i++){
			if(i<7) {
 362:	c7 30       	cpi	r28, 0x07	; 7
 364:	d1 05       	cpc	r29, r1
 366:	5c f4       	brge	.+22     	; 0x37e <led_shift+0x52>
				val = 0x01;
				PORTC = ~(val << i);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0c 2e       	mov	r0, r28
 36e:	02 c0       	rjmp	.+4      	; 0x374 <led_shift+0x48>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <led_shift+0x44>
 378:	80 95       	com	r24
 37a:	88 b9       	out	0x08, r24	; 8
 37c:	0c c0       	rjmp	.+24     	; 0x396 <led_shift+0x6a>
			}
			else {
				val = 0x80;
				PORTC = ~(val >> (i-7));
 37e:	9e 01       	movw	r18, r28
 380:	27 50       	subi	r18, 0x07	; 7
 382:	31 09       	sbc	r19, r1
 384:	80 e8       	ldi	r24, 0x80	; 128
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <led_shift+0x62>
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	2a 95       	dec	r18
 390:	e2 f7       	brpl	.-8      	; 0x38a <led_shift+0x5e>
 392:	80 95       	com	r24
 394:	88 b9       	out	0x08, r24	; 8
			}
			_delay_ms(_s);
 396:	b8 01       	movw	r22, r16
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	2d d1       	rcall	.+602    	; 0x5f8 <__floatunsisf>
 39e:	2b 01       	movw	r4, r22
 3a0:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	4a e7       	ldi	r20, 0x7A	; 122
 3a8:	55 e4       	ldi	r21, 0x45	; 69
 3aa:	b4 d1       	rcall	.+872    	; 0x714 <__mulsf3>
 3ac:	4b 01       	movw	r8, r22
 3ae:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	40 e8       	ldi	r20, 0x80	; 128
 3b6:	5f e3       	ldi	r21, 0x3F	; 63
 3b8:	ef d0       	rcall	.+478    	; 0x598 <__cmpsf2>
 3ba:	88 23       	and	r24, r24
 3bc:	04 f1       	brlt	.+64     	; 0x3fe <led_shift+0xd2>
		__ticks = 1;
	else if (__tmp > 65535)
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	3f ef       	ldi	r19, 0xFF	; 255
 3c2:	4f e7       	ldi	r20, 0x7F	; 127
 3c4:	57 e4       	ldi	r21, 0x47	; 71
 3c6:	c5 01       	movw	r24, r10
 3c8:	b4 01       	movw	r22, r8
 3ca:	a0 d1       	rcall	.+832    	; 0x70c <__gesf2>
 3cc:	18 16       	cp	r1, r24
 3ce:	9c f4       	brge	.+38     	; 0x3f6 <led_shift+0xca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	40 e2       	ldi	r20, 0x20	; 32
 3d6:	51 e4       	ldi	r21, 0x41	; 65
 3d8:	c3 01       	movw	r24, r6
 3da:	b2 01       	movw	r22, r4
 3dc:	9b d1       	rcall	.+822    	; 0x714 <__mulsf3>
 3de:	e0 d0       	rcall	.+448    	; 0x5a0 <__fixunssfsi>
 3e0:	06 c0       	rjmp	.+12     	; 0x3ee <led_shift+0xc2>
 3e2:	80 e9       	ldi	r24, 0x90	; 144
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <led_shift+0xba>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ea:	61 50       	subi	r22, 0x01	; 1
 3ec:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ee:	61 15       	cp	r22, r1
 3f0:	71 05       	cpc	r23, r1
 3f2:	b9 f7       	brne	.-18     	; 0x3e2 <led_shift+0xb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f6:	c5 01       	movw	r24, r10
 3f8:	b4 01       	movw	r22, r8
 3fa:	d2 d0       	rcall	.+420    	; 0x5a0 <__fixunssfsi>
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	cb 01       	movw	r24, r22
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	for(int j=0; j<3; j++){
		
		if(j==0) i=0;
		else i=1;
		
		for( ; i<15; i++){
 408:	21 96       	adiw	r28, 0x01	; 1
 40a:	cf 30       	cpi	r28, 0x0F	; 15
 40c:	d1 05       	cpc	r29, r1
 40e:	0c f4       	brge	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	a8 cf       	rjmp	.-176    	; 0x362 <led_shift+0x36>
}

void led_shift(unsigned int _s){
	unsigned int val;
	int i;
	for(int j=0; j<3; j++){
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	e8 1a       	sub	r14, r24
 416:	f8 0a       	sbc	r15, r24
 418:	23 e0       	ldi	r18, 0x03	; 3
 41a:	e2 16       	cp	r14, r18
 41c:	f1 04       	cpc	r15, r1
 41e:	0c f4       	brge	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	97 cf       	rjmp	.-210    	; 0x350 <led_shift+0x24>
				PORTC = ~(val >> (i-7));
			}
			_delay_ms(_s);
		}
	}
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	ff 90       	pop	r15
 42c:	ef 90       	pop	r14
 42e:	bf 90       	pop	r11
 430:	af 90       	pop	r10
 432:	9f 90       	pop	r9
 434:	8f 90       	pop	r8
 436:	7f 90       	pop	r7
 438:	6f 90       	pop	r6
 43a:	5f 90       	pop	r5
 43c:	4f 90       	pop	r4
 43e:	08 95       	ret

00000440 <__vector_3>:

ISR(INT2_vect){
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	0b b6       	in	r0, 0x3b	; 59
 44c:	0f 92       	push	r0
 44e:	2f 93       	push	r18
 450:	3f 93       	push	r19
 452:	4f 93       	push	r20
 454:	5f 93       	push	r21
 456:	6f 93       	push	r22
 458:	7f 93       	push	r23
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	af 93       	push	r26
 460:	bf 93       	push	r27
 462:	ef 93       	push	r30
 464:	ff 93       	push	r31
	cli();
 466:	f8 94       	cli
	EIFR|=0x04;
 468:	8c b3       	in	r24, 0x1c	; 28
 46a:	84 60       	ori	r24, 0x04	; 4
 46c:	8c bb       	out	0x1c, r24	; 28
	sei();
 46e:	78 94       	sei
	led_shift(100);
 470:	84 e6       	ldi	r24, 0x64	; 100
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	5b df       	rcall	.-330    	; 0x32c <led_shift>
	reti();
 476:	18 95       	reti
}
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0b be       	out	0x3b, r0	; 59
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <__vector_6>:

ISR(INT5_vect){
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	0b b6       	in	r0, 0x3b	; 59
 4aa:	0f 92       	push	r0
 4ac:	2f 93       	push	r18
 4ae:	3f 93       	push	r19
 4b0:	4f 93       	push	r20
 4b2:	5f 93       	push	r21
 4b4:	6f 93       	push	r22
 4b6:	7f 93       	push	r23
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
 4bc:	af 93       	push	r26
 4be:	bf 93       	push	r27
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
	cli();
 4c4:	f8 94       	cli
	EIFR |= 0x20;
 4c6:	8c b3       	in	r24, 0x1c	; 28
 4c8:	80 62       	ori	r24, 0x20	; 32
 4ca:	8c bb       	out	0x1c, r24	; 28
	sei();
 4cc:	78 94       	sei
	led_all(200);
 4ce:	88 ec       	ldi	r24, 0xC8	; 200
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	13 de       	rcall	.-986    	; 0xfa <led_all>
	reti();
 4d4:	18 95       	reti
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0b be       	out	0x3b, r0	; 59
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

000004fc <__vector_11>:

ISR(PCINT2_vect){
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	0b b6       	in	r0, 0x3b	; 59
 508:	0f 92       	push	r0
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	6f 93       	push	r22
 514:	7f 93       	push	r23
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	af 93       	push	r26
 51c:	bf 93       	push	r27
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	cli();
 522:	f8 94       	cli
	unsigned int in = PINK & (0x04);
 524:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
	PCIFR |= 0x04;
 528:	8b b3       	in	r24, 0x1b	; 27
 52a:	84 60       	ori	r24, 0x04	; 4
 52c:	8b bb       	out	0x1b, r24	; 27
	sei();
 52e:	78 94       	sei
	if(!in) led_alternating(200);
 530:	92 fd       	sbrc	r25, 2
 532:	04 c0       	rjmp	.+8      	; 0x53c <__vector_11+0x40>
 534:	88 ec       	ldi	r24, 0xC8	; 200
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	6c de       	rcall	.-808    	; 0x212 <led_alternating>
	else return 0;
	reti();
 53a:	18 95       	reti
}
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0b be       	out	0x3b, r0	; 59
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <main>:

int main(void)
{
	cli();
 562:	f8 94       	cli
	
	EICRA = 0x20;
 564:	80 e2       	ldi	r24, 0x20	; 32
 566:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	EICRB = 0x08;
 56a:	88 e0       	ldi	r24, 0x08	; 8
 56c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
	EIMSK = 0x24;
 570:	84 e2       	ldi	r24, 0x24	; 36
 572:	8d bb       	out	0x1d, r24	; 29
	EIFR =  0x24;
 574:	8c bb       	out	0x1c, r24	; 28
	
	PCICR = 0x04;
 576:	84 e0       	ldi	r24, 0x04	; 4
 578:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
	PCIFR = 0x04;
 57c:	8b bb       	out	0x1b, r24	; 27
	PCMSK2 = 0x04;
 57e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7c006d>
	
	PORTC = 0xFF;
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	88 b9       	out	0x08, r24	; 8
	DDRC = 0xFF;
 586:	87 b9       	out	0x07, r24	; 7
	
	DDRD = ~(0x04);
 588:	8b ef       	ldi	r24, 0xFB	; 251
 58a:	8a b9       	out	0x0a, r24	; 10
	DDRE = ~(0x20);
 58c:	9f ed       	ldi	r25, 0xDF	; 223
 58e:	9d b9       	out	0x0d, r25	; 13
	
	DDRK = ~(0x04);
 590:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	
	sei();
 594:	78 94       	sei
 596:	ff cf       	rjmp	.-2      	; 0x596 <main+0x34>

00000598 <__cmpsf2>:
 598:	6c d0       	rcall	.+216    	; 0x672 <__fp_cmp>
 59a:	08 f4       	brcc	.+2      	; 0x59e <__cmpsf2+0x6>
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	08 95       	ret

000005a0 <__fixunssfsi>:
 5a0:	94 d0       	rcall	.+296    	; 0x6ca <__fp_splitA>
 5a2:	88 f0       	brcs	.+34     	; 0x5c6 <__fixunssfsi+0x26>
 5a4:	9f 57       	subi	r25, 0x7F	; 127
 5a6:	90 f0       	brcs	.+36     	; 0x5cc <__fixunssfsi+0x2c>
 5a8:	b9 2f       	mov	r27, r25
 5aa:	99 27       	eor	r25, r25
 5ac:	b7 51       	subi	r27, 0x17	; 23
 5ae:	a0 f0       	brcs	.+40     	; 0x5d8 <__fixunssfsi+0x38>
 5b0:	d1 f0       	breq	.+52     	; 0x5e6 <__fixunssfsi+0x46>
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	1a f0       	brmi	.+6      	; 0x5c2 <__fixunssfsi+0x22>
 5bc:	ba 95       	dec	r27
 5be:	c9 f7       	brne	.-14     	; 0x5b2 <__fixunssfsi+0x12>
 5c0:	12 c0       	rjmp	.+36     	; 0x5e6 <__fixunssfsi+0x46>
 5c2:	b1 30       	cpi	r27, 0x01	; 1
 5c4:	81 f0       	breq	.+32     	; 0x5e6 <__fixunssfsi+0x46>
 5c6:	9b d0       	rcall	.+310    	; 0x6fe <__fp_zero>
 5c8:	b1 e0       	ldi	r27, 0x01	; 1
 5ca:	08 95       	ret
 5cc:	98 c0       	rjmp	.+304    	; 0x6fe <__fp_zero>
 5ce:	67 2f       	mov	r22, r23
 5d0:	78 2f       	mov	r23, r24
 5d2:	88 27       	eor	r24, r24
 5d4:	b8 5f       	subi	r27, 0xF8	; 248
 5d6:	39 f0       	breq	.+14     	; 0x5e6 <__fixunssfsi+0x46>
 5d8:	b9 3f       	cpi	r27, 0xF9	; 249
 5da:	cc f3       	brlt	.-14     	; 0x5ce <__fixunssfsi+0x2e>
 5dc:	86 95       	lsr	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b3 95       	inc	r27
 5e4:	d9 f7       	brne	.-10     	; 0x5dc <__fixunssfsi+0x3c>
 5e6:	3e f4       	brtc	.+14     	; 0x5f6 <__fixunssfsi+0x56>
 5e8:	90 95       	com	r25
 5ea:	80 95       	com	r24
 5ec:	70 95       	com	r23
 5ee:	61 95       	neg	r22
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__floatunsisf>:
 5f8:	e8 94       	clt
 5fa:	09 c0       	rjmp	.+18     	; 0x60e <__floatsisf+0x12>

000005fc <__floatsisf>:
 5fc:	97 fb       	bst	r25, 7
 5fe:	3e f4       	brtc	.+14     	; 0x60e <__floatsisf+0x12>
 600:	90 95       	com	r25
 602:	80 95       	com	r24
 604:	70 95       	com	r23
 606:	61 95       	neg	r22
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	99 23       	and	r25, r25
 610:	a9 f0       	breq	.+42     	; 0x63c <__floatsisf+0x40>
 612:	f9 2f       	mov	r31, r25
 614:	96 e9       	ldi	r25, 0x96	; 150
 616:	bb 27       	eor	r27, r27
 618:	93 95       	inc	r25
 61a:	f6 95       	lsr	r31
 61c:	87 95       	ror	r24
 61e:	77 95       	ror	r23
 620:	67 95       	ror	r22
 622:	b7 95       	ror	r27
 624:	f1 11       	cpse	r31, r1
 626:	f8 cf       	rjmp	.-16     	; 0x618 <__floatsisf+0x1c>
 628:	fa f4       	brpl	.+62     	; 0x668 <__floatsisf+0x6c>
 62a:	bb 0f       	add	r27, r27
 62c:	11 f4       	brne	.+4      	; 0x632 <__floatsisf+0x36>
 62e:	60 ff       	sbrs	r22, 0
 630:	1b c0       	rjmp	.+54     	; 0x668 <__floatsisf+0x6c>
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	16 c0       	rjmp	.+44     	; 0x668 <__floatsisf+0x6c>
 63c:	88 23       	and	r24, r24
 63e:	11 f0       	breq	.+4      	; 0x644 <__floatsisf+0x48>
 640:	96 e9       	ldi	r25, 0x96	; 150
 642:	11 c0       	rjmp	.+34     	; 0x666 <__floatsisf+0x6a>
 644:	77 23       	and	r23, r23
 646:	21 f0       	breq	.+8      	; 0x650 <__floatsisf+0x54>
 648:	9e e8       	ldi	r25, 0x8E	; 142
 64a:	87 2f       	mov	r24, r23
 64c:	76 2f       	mov	r23, r22
 64e:	05 c0       	rjmp	.+10     	; 0x65a <__floatsisf+0x5e>
 650:	66 23       	and	r22, r22
 652:	71 f0       	breq	.+28     	; 0x670 <__floatsisf+0x74>
 654:	96 e8       	ldi	r25, 0x86	; 134
 656:	86 2f       	mov	r24, r22
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	2a f0       	brmi	.+10     	; 0x668 <__floatsisf+0x6c>
 65e:	9a 95       	dec	r25
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	da f7       	brpl	.-10     	; 0x65e <__floatsisf+0x62>
 668:	88 0f       	add	r24, r24
 66a:	96 95       	lsr	r25
 66c:	87 95       	ror	r24
 66e:	97 f9       	bld	r25, 7
 670:	08 95       	ret

00000672 <__fp_cmp>:
 672:	99 0f       	add	r25, r25
 674:	00 08       	sbc	r0, r0
 676:	55 0f       	add	r21, r21
 678:	aa 0b       	sbc	r26, r26
 67a:	e0 e8       	ldi	r30, 0x80	; 128
 67c:	fe ef       	ldi	r31, 0xFE	; 254
 67e:	16 16       	cp	r1, r22
 680:	17 06       	cpc	r1, r23
 682:	e8 07       	cpc	r30, r24
 684:	f9 07       	cpc	r31, r25
 686:	c0 f0       	brcs	.+48     	; 0x6b8 <__fp_cmp+0x46>
 688:	12 16       	cp	r1, r18
 68a:	13 06       	cpc	r1, r19
 68c:	e4 07       	cpc	r30, r20
 68e:	f5 07       	cpc	r31, r21
 690:	98 f0       	brcs	.+38     	; 0x6b8 <__fp_cmp+0x46>
 692:	62 1b       	sub	r22, r18
 694:	73 0b       	sbc	r23, r19
 696:	84 0b       	sbc	r24, r20
 698:	95 0b       	sbc	r25, r21
 69a:	39 f4       	brne	.+14     	; 0x6aa <__fp_cmp+0x38>
 69c:	0a 26       	eor	r0, r26
 69e:	61 f0       	breq	.+24     	; 0x6b8 <__fp_cmp+0x46>
 6a0:	23 2b       	or	r18, r19
 6a2:	24 2b       	or	r18, r20
 6a4:	25 2b       	or	r18, r21
 6a6:	21 f4       	brne	.+8      	; 0x6b0 <__fp_cmp+0x3e>
 6a8:	08 95       	ret
 6aa:	0a 26       	eor	r0, r26
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <__fp_cmp+0x3e>
 6ae:	a1 40       	sbci	r26, 0x01	; 1
 6b0:	a6 95       	lsr	r26
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	81 1d       	adc	r24, r1
 6b6:	81 1d       	adc	r24, r1
 6b8:	08 95       	ret

000006ba <__fp_split3>:
 6ba:	57 fd       	sbrc	r21, 7
 6bc:	90 58       	subi	r25, 0x80	; 128
 6be:	44 0f       	add	r20, r20
 6c0:	55 1f       	adc	r21, r21
 6c2:	59 f0       	breq	.+22     	; 0x6da <__fp_splitA+0x10>
 6c4:	5f 3f       	cpi	r21, 0xFF	; 255
 6c6:	71 f0       	breq	.+28     	; 0x6e4 <__fp_splitA+0x1a>
 6c8:	47 95       	ror	r20

000006ca <__fp_splitA>:
 6ca:	88 0f       	add	r24, r24
 6cc:	97 fb       	bst	r25, 7
 6ce:	99 1f       	adc	r25, r25
 6d0:	61 f0       	breq	.+24     	; 0x6ea <__fp_splitA+0x20>
 6d2:	9f 3f       	cpi	r25, 0xFF	; 255
 6d4:	79 f0       	breq	.+30     	; 0x6f4 <__fp_splitA+0x2a>
 6d6:	87 95       	ror	r24
 6d8:	08 95       	ret
 6da:	12 16       	cp	r1, r18
 6dc:	13 06       	cpc	r1, r19
 6de:	14 06       	cpc	r1, r20
 6e0:	55 1f       	adc	r21, r21
 6e2:	f2 cf       	rjmp	.-28     	; 0x6c8 <__fp_split3+0xe>
 6e4:	46 95       	lsr	r20
 6e6:	f1 df       	rcall	.-30     	; 0x6ca <__fp_splitA>
 6e8:	08 c0       	rjmp	.+16     	; 0x6fa <__fp_splitA+0x30>
 6ea:	16 16       	cp	r1, r22
 6ec:	17 06       	cpc	r1, r23
 6ee:	18 06       	cpc	r1, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	f1 cf       	rjmp	.-30     	; 0x6d6 <__fp_splitA+0xc>
 6f4:	86 95       	lsr	r24
 6f6:	71 05       	cpc	r23, r1
 6f8:	61 05       	cpc	r22, r1
 6fa:	08 94       	sec
 6fc:	08 95       	ret

000006fe <__fp_zero>:
 6fe:	e8 94       	clt

00000700 <__fp_szero>:
 700:	bb 27       	eor	r27, r27
 702:	66 27       	eor	r22, r22
 704:	77 27       	eor	r23, r23
 706:	cb 01       	movw	r24, r22
 708:	97 f9       	bld	r25, 7
 70a:	08 95       	ret

0000070c <__gesf2>:
 70c:	b2 df       	rcall	.-156    	; 0x672 <__fp_cmp>
 70e:	08 f4       	brcc	.+2      	; 0x712 <__gesf2+0x6>
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	08 95       	ret

00000714 <__mulsf3>:
 714:	0b d0       	rcall	.+22     	; 0x72c <__mulsf3x>
 716:	78 c0       	rjmp	.+240    	; 0x808 <__fp_round>
 718:	69 d0       	rcall	.+210    	; 0x7ec <__fp_pscA>
 71a:	28 f0       	brcs	.+10     	; 0x726 <__mulsf3+0x12>
 71c:	6e d0       	rcall	.+220    	; 0x7fa <__fp_pscB>
 71e:	18 f0       	brcs	.+6      	; 0x726 <__mulsf3+0x12>
 720:	95 23       	and	r25, r21
 722:	09 f0       	breq	.+2      	; 0x726 <__mulsf3+0x12>
 724:	5a c0       	rjmp	.+180    	; 0x7da <__fp_inf>
 726:	5f c0       	rjmp	.+190    	; 0x7e6 <__fp_nan>
 728:	11 24       	eor	r1, r1
 72a:	ea cf       	rjmp	.-44     	; 0x700 <__fp_szero>

0000072c <__mulsf3x>:
 72c:	c6 df       	rcall	.-116    	; 0x6ba <__fp_split3>
 72e:	a0 f3       	brcs	.-24     	; 0x718 <__mulsf3+0x4>

00000730 <__mulsf3_pse>:
 730:	95 9f       	mul	r25, r21
 732:	d1 f3       	breq	.-12     	; 0x728 <__mulsf3+0x14>
 734:	95 0f       	add	r25, r21
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	55 1f       	adc	r21, r21
 73a:	62 9f       	mul	r22, r18
 73c:	f0 01       	movw	r30, r0
 73e:	72 9f       	mul	r23, r18
 740:	bb 27       	eor	r27, r27
 742:	f0 0d       	add	r31, r0
 744:	b1 1d       	adc	r27, r1
 746:	63 9f       	mul	r22, r19
 748:	aa 27       	eor	r26, r26
 74a:	f0 0d       	add	r31, r0
 74c:	b1 1d       	adc	r27, r1
 74e:	aa 1f       	adc	r26, r26
 750:	64 9f       	mul	r22, r20
 752:	66 27       	eor	r22, r22
 754:	b0 0d       	add	r27, r0
 756:	a1 1d       	adc	r26, r1
 758:	66 1f       	adc	r22, r22
 75a:	82 9f       	mul	r24, r18
 75c:	22 27       	eor	r18, r18
 75e:	b0 0d       	add	r27, r0
 760:	a1 1d       	adc	r26, r1
 762:	62 1f       	adc	r22, r18
 764:	73 9f       	mul	r23, r19
 766:	b0 0d       	add	r27, r0
 768:	a1 1d       	adc	r26, r1
 76a:	62 1f       	adc	r22, r18
 76c:	83 9f       	mul	r24, r19
 76e:	a0 0d       	add	r26, r0
 770:	61 1d       	adc	r22, r1
 772:	22 1f       	adc	r18, r18
 774:	74 9f       	mul	r23, r20
 776:	33 27       	eor	r19, r19
 778:	a0 0d       	add	r26, r0
 77a:	61 1d       	adc	r22, r1
 77c:	23 1f       	adc	r18, r19
 77e:	84 9f       	mul	r24, r20
 780:	60 0d       	add	r22, r0
 782:	21 1d       	adc	r18, r1
 784:	82 2f       	mov	r24, r18
 786:	76 2f       	mov	r23, r22
 788:	6a 2f       	mov	r22, r26
 78a:	11 24       	eor	r1, r1
 78c:	9f 57       	subi	r25, 0x7F	; 127
 78e:	50 40       	sbci	r21, 0x00	; 0
 790:	8a f0       	brmi	.+34     	; 0x7b4 <__mulsf3_pse+0x84>
 792:	e1 f0       	breq	.+56     	; 0x7cc <__mulsf3_pse+0x9c>
 794:	88 23       	and	r24, r24
 796:	4a f0       	brmi	.+18     	; 0x7aa <__mulsf3_pse+0x7a>
 798:	ee 0f       	add	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	bb 1f       	adc	r27, r27
 79e:	66 1f       	adc	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	88 1f       	adc	r24, r24
 7a4:	91 50       	subi	r25, 0x01	; 1
 7a6:	50 40       	sbci	r21, 0x00	; 0
 7a8:	a9 f7       	brne	.-22     	; 0x794 <__mulsf3_pse+0x64>
 7aa:	9e 3f       	cpi	r25, 0xFE	; 254
 7ac:	51 05       	cpc	r21, r1
 7ae:	70 f0       	brcs	.+28     	; 0x7cc <__mulsf3_pse+0x9c>
 7b0:	14 c0       	rjmp	.+40     	; 0x7da <__fp_inf>
 7b2:	a6 cf       	rjmp	.-180    	; 0x700 <__fp_szero>
 7b4:	5f 3f       	cpi	r21, 0xFF	; 255
 7b6:	ec f3       	brlt	.-6      	; 0x7b2 <__mulsf3_pse+0x82>
 7b8:	98 3e       	cpi	r25, 0xE8	; 232
 7ba:	dc f3       	brlt	.-10     	; 0x7b2 <__mulsf3_pse+0x82>
 7bc:	86 95       	lsr	r24
 7be:	77 95       	ror	r23
 7c0:	67 95       	ror	r22
 7c2:	b7 95       	ror	r27
 7c4:	f7 95       	ror	r31
 7c6:	e7 95       	ror	r30
 7c8:	9f 5f       	subi	r25, 0xFF	; 255
 7ca:	c1 f7       	brne	.-16     	; 0x7bc <__mulsf3_pse+0x8c>
 7cc:	fe 2b       	or	r31, r30
 7ce:	88 0f       	add	r24, r24
 7d0:	91 1d       	adc	r25, r1
 7d2:	96 95       	lsr	r25
 7d4:	87 95       	ror	r24
 7d6:	97 f9       	bld	r25, 7
 7d8:	08 95       	ret

000007da <__fp_inf>:
 7da:	97 f9       	bld	r25, 7
 7dc:	9f 67       	ori	r25, 0x7F	; 127
 7de:	80 e8       	ldi	r24, 0x80	; 128
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	08 95       	ret

000007e6 <__fp_nan>:
 7e6:	9f ef       	ldi	r25, 0xFF	; 255
 7e8:	80 ec       	ldi	r24, 0xC0	; 192
 7ea:	08 95       	ret

000007ec <__fp_pscA>:
 7ec:	00 24       	eor	r0, r0
 7ee:	0a 94       	dec	r0
 7f0:	16 16       	cp	r1, r22
 7f2:	17 06       	cpc	r1, r23
 7f4:	18 06       	cpc	r1, r24
 7f6:	09 06       	cpc	r0, r25
 7f8:	08 95       	ret

000007fa <__fp_pscB>:
 7fa:	00 24       	eor	r0, r0
 7fc:	0a 94       	dec	r0
 7fe:	12 16       	cp	r1, r18
 800:	13 06       	cpc	r1, r19
 802:	14 06       	cpc	r1, r20
 804:	05 06       	cpc	r0, r21
 806:	08 95       	ret

00000808 <__fp_round>:
 808:	09 2e       	mov	r0, r25
 80a:	03 94       	inc	r0
 80c:	00 0c       	add	r0, r0
 80e:	11 f4       	brne	.+4      	; 0x814 <__fp_round+0xc>
 810:	88 23       	and	r24, r24
 812:	52 f0       	brmi	.+20     	; 0x828 <__fp_round+0x20>
 814:	bb 0f       	add	r27, r27
 816:	40 f4       	brcc	.+16     	; 0x828 <__fp_round+0x20>
 818:	bf 2b       	or	r27, r31
 81a:	11 f4       	brne	.+4      	; 0x820 <__fp_round+0x18>
 81c:	60 ff       	sbrs	r22, 0
 81e:	04 c0       	rjmp	.+8      	; 0x828 <__fp_round+0x20>
 820:	6f 5f       	subi	r22, 0xFF	; 255
 822:	7f 4f       	sbci	r23, 0xFF	; 255
 824:	8f 4f       	sbci	r24, 0xFF	; 255
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	08 95       	ret

0000082a <_exit>:
 82a:	f8 94       	cli

0000082c <__stop_program>:
 82c:	ff cf       	rjmp	.-2      	; 0x82c <__stop_program>
