
Project_NeoPixel_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015c1  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e65  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007fd  00000000  00000000  000028f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  000030f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000707  00000000  00000000  00003200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c76  00000000  00000000  00003907  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000457d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	00 d1       	rcall	.+512    	; 0x2f6 <main>
  f6:	47 c1       	rjmp	.+654    	; 0x386 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <led_symmetric_shift>:

#define interrupt_is_disabled

#include "mc_ws2812.h"

void led_symmetric_shift(rgbw_color color) {
  fa:	8f 92       	push	r8
  fc:	9f 92       	push	r9
  fe:	af 92       	push	r10
 100:	bf 92       	push	r11
 102:	cf 92       	push	r12
 104:	df 92       	push	r13
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	c0 54       	subi	r28, 0x40	; 64
 118:	d1 09       	sbc	r29, r1
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	ab 01       	movw	r20, r22
 126:	bc 01       	movw	r22, r24
	
	rgbw_color cArr[LED_COUNT];
	
	int dir = 1;
	
	for(int i=0; i<LED_COUNT; i++) {
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	25 c0       	rjmp	.+74     	; 0x178 <led_symmetric_shift+0x7e>
		if(i == 0 || i == 15) {
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	19 f0       	breq	.+6      	; 0x138 <led_symmetric_shift+0x3e>
 132:	8f 30       	cpi	r24, 0x0F	; 15
 134:	91 05       	cpc	r25, r1
 136:	81 f4       	brne	.+32     	; 0x158 <led_symmetric_shift+0x5e>
			cArr[i] = color;
 138:	fc 01       	movw	r30, r24
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	2c 0f       	add	r18, r28
 148:	3d 1f       	adc	r19, r29
 14a:	e2 0f       	add	r30, r18
 14c:	f3 1f       	adc	r31, r19
 14e:	40 83       	st	Z, r20
 150:	51 83       	std	Z+1, r21	; 0x01
 152:	62 83       	std	Z+2, r22	; 0x02
 154:	73 83       	std	Z+3, r23	; 0x03
 156:	0f c0       	rjmp	.+30     	; 0x176 <led_symmetric_shift+0x7c>
		}
		else {
			cArr[i] = (rgbw_color) {0, 0, 0, 0};
 158:	fc 01       	movw	r30, r24
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	a1 e0       	ldi	r26, 0x01	; 1
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	ac 0f       	add	r26, r28
 168:	bd 1f       	adc	r27, r29
 16a:	ea 0f       	add	r30, r26
 16c:	fb 1f       	adc	r31, r27
 16e:	10 82       	st	Z, r1
 170:	11 82       	std	Z+1, r1	; 0x01
 172:	12 82       	std	Z+2, r1	; 0x02
 174:	13 82       	std	Z+3, r1	; 0x03
	
	rgbw_color cArr[LED_COUNT];
	
	int dir = 1;
	
	for(int i=0; i<LED_COUNT; i++) {
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	80 31       	cpi	r24, 0x10	; 16
 17a:	91 05       	cpc	r25, r1
 17c:	c4 f2       	brlt	.-80     	; 0x12e <led_symmetric_shift+0x34>
 17e:	00 e0       	ldi	r16, 0x00	; 0
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	ee 24       	eor	r14, r14
 184:	e3 94       	inc	r14
 186:	f1 2c       	mov	r15, r1
 188:	92 c0       	rjmp	.+292    	; 0x2ae <led_symmetric_shift+0x1b4>
		}
	}
	
	for(int i=0; dir ? i < LED_COUNT / 2 : i > 0 ; dir ? i++ : i--) {
		
		if(dir == 1 && i==0) {
 18a:	b1 e0       	ldi	r27, 0x01	; 1
 18c:	eb 16       	cp	r14, r27
 18e:	f1 04       	cpc	r15, r1
 190:	a1 f4       	brne	.+40     	; 0x1ba <led_symmetric_shift+0xc0>
 192:	01 15       	cp	r16, r1
 194:	11 05       	cpc	r17, r1
 196:	89 f4       	brne	.+34     	; 0x1ba <led_symmetric_shift+0xc0>
			ws2812_setleds_rgbw_PB(6, cArr, LED_COUNT);
 198:	40 e1       	ldi	r20, 0x10	; 16
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	be 01       	movw	r22, r28
 19e:	6f 5f       	subi	r22, 0xFF	; 255
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	86 e0       	ldi	r24, 0x06	; 6
 1a4:	b5 d0       	rcall	.+362    	; 0x310 <ws2812_setleds_rgbw_PB>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	ef ef       	ldi	r30, 0xFF	; 255
 1a8:	f1 ee       	ldi	r31, 0xE1	; 225
 1aa:	24 e0       	ldi	r18, 0x04	; 4
 1ac:	e1 50       	subi	r30, 0x01	; 1
 1ae:	f0 40       	sbci	r31, 0x00	; 0
 1b0:	20 40       	sbci	r18, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <led_symmetric_shift+0xb2>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <led_symmetric_shift+0xbc>
 1b6:	00 00       	nop
 1b8:	72 c0       	rjmp	.+228    	; 0x29e <led_symmetric_shift+0x1a4>
			_delay_ms(100);
			continue;
		}
		
		int k, j;
		if(dir == 1) {
 1ba:	31 e0       	ldi	r19, 0x01	; 1
 1bc:	e3 16       	cp	r14, r19
 1be:	f1 04       	cpc	r15, r1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <led_symmetric_shift+0xd6>
			k = i;
			j = LED_COUNT - i;
 1c2:	e0 e1       	ldi	r30, 0x10	; 16
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	6f 01       	movw	r12, r30
 1c8:	c0 1a       	sub	r12, r16
 1ca:	d1 0a       	sbc	r13, r17
			continue;
		}
		
		int k, j;
		if(dir == 1) {
			k = i;
 1cc:	58 01       	movw	r10, r16
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <led_symmetric_shift+0xe8>
			j = LED_COUNT - i;
		}
		else {
			k = i + 1;
 1d0:	58 01       	movw	r10, r16
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	a8 1a       	sub	r10, r24
 1d6:	b8 0a       	sbc	r11, r24
			j = LED_COUNT - i - 1; 
 1d8:	ef e0       	ldi	r30, 0x0F	; 15
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	6f 01       	movw	r12, r30
 1de:	c0 1a       	sub	r12, r16
 1e0:	d1 0a       	sbc	r13, r17
		}
		
		rgbw_color tempColor1 = cArr[k];
 1e2:	c5 01       	movw	r24, r10
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	a1 e0       	ldi	r26, 0x01	; 1
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	ac 0f       	add	r26, r28
 1f2:	bd 1f       	adc	r27, r29
 1f4:	8a 0f       	add	r24, r26
 1f6:	9b 1f       	adc	r25, r27
 1f8:	fc 01       	movw	r30, r24
 1fa:	40 81       	ld	r20, Z
 1fc:	51 81       	ldd	r21, Z+1	; 0x01
 1fe:	62 81       	ldd	r22, Z+2	; 0x02
 200:	73 81       	ldd	r23, Z+3	; 0x03
		cArr[k] = cArr[k - 1];
 202:	d5 01       	movw	r26, r10
 204:	11 97       	sbiw	r26, 0x01	; 1
 206:	aa 0f       	add	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	aa 0f       	add	r26, r26
 20c:	bb 1f       	adc	r27, r27
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	2c 0f       	add	r18, r28
 214:	3d 1f       	adc	r19, r29
 216:	a2 0f       	add	r26, r18
 218:	b3 1f       	adc	r27, r19
 21a:	8d 90       	ld	r8, X+
 21c:	9d 90       	ld	r9, X+
 21e:	ad 90       	ld	r10, X+
 220:	bc 90       	ld	r11, X
 222:	13 97       	sbiw	r26, 0x03	; 3
 224:	80 82       	st	Z, r8
 226:	91 82       	std	Z+1, r9	; 0x01
 228:	a2 82       	std	Z+2, r10	; 0x02
 22a:	b3 82       	std	Z+3, r11	; 0x03
		cArr[k - 1] = tempColor1;
 22c:	4d 93       	st	X+, r20
 22e:	5d 93       	st	X+, r21
 230:	6d 93       	st	X+, r22
 232:	7c 93       	st	X, r23
 234:	13 97       	sbiw	r26, 0x03	; 3
			
		
		rgbw_color tempColor2 = cArr[j];
 236:	d6 01       	movw	r26, r12
 238:	aa 0f       	add	r26, r26
 23a:	bb 1f       	adc	r27, r27
 23c:	aa 0f       	add	r26, r26
 23e:	bb 1f       	adc	r27, r27
 240:	a2 0f       	add	r26, r18
 242:	b3 1f       	adc	r27, r19
 244:	4d 91       	ld	r20, X+
 246:	5d 91       	ld	r21, X+
 248:	6d 91       	ld	r22, X+
 24a:	7c 91       	ld	r23, X
 24c:	13 97       	sbiw	r26, 0x03	; 3
		cArr[j] = cArr[j - 1];
 24e:	f6 01       	movw	r30, r12
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	ee 0f       	add	r30, r30
 258:	ff 1f       	adc	r31, r31
 25a:	e2 0f       	add	r30, r18
 25c:	f3 1f       	adc	r31, r19
 25e:	80 80       	ld	r8, Z
 260:	91 80       	ldd	r9, Z+1	; 0x01
 262:	a2 80       	ldd	r10, Z+2	; 0x02
 264:	b3 80       	ldd	r11, Z+3	; 0x03
 266:	8d 92       	st	X+, r8
 268:	9d 92       	st	X+, r9
 26a:	ad 92       	st	X+, r10
 26c:	bc 92       	st	X, r11
 26e:	13 97       	sbiw	r26, 0x03	; 3
		cArr[j - 1] = tempColor2;
 270:	40 83       	st	Z, r20
 272:	51 83       	std	Z+1, r21	; 0x01
 274:	62 83       	std	Z+2, r22	; 0x02
 276:	73 83       	std	Z+3, r23	; 0x03
		
		ws2812_setleds_rgbw_PB(6, cArr, LED_COUNT);
 278:	40 e1       	ldi	r20, 0x10	; 16
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	b9 01       	movw	r22, r18
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	47 d0       	rcall	.+142    	; 0x310 <ws2812_setleds_rgbw_PB>
 282:	ff ef       	ldi	r31, 0xFF	; 255
 284:	21 ee       	ldi	r18, 0xE1	; 225
 286:	34 e0       	ldi	r19, 0x04	; 4
 288:	f1 50       	subi	r31, 0x01	; 1
 28a:	20 40       	sbci	r18, 0x00	; 0
 28c:	30 40       	sbci	r19, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <led_symmetric_shift+0x18e>
 290:	00 c0       	rjmp	.+0      	; 0x292 <led_symmetric_shift+0x198>
 292:	00 00       	nop
		_delay_ms(100);
		
		if(i == (LED_COUNT/2) - 1) { 
 294:	07 30       	cpi	r16, 0x07	; 7
 296:	11 05       	cpc	r17, r1
 298:	11 f4       	brne	.+4      	; 0x29e <led_symmetric_shift+0x1a4>
			dir = 0;
 29a:	e1 2c       	mov	r14, r1
 29c:	f1 2c       	mov	r15, r1
		else {
			cArr[i] = (rgbw_color) {0, 0, 0, 0};
		}
	}
	
	for(int i=0; dir ? i < LED_COUNT / 2 : i > 0 ; dir ? i++ : i--) {
 29e:	e1 14       	cp	r14, r1
 2a0:	f1 04       	cpc	r15, r1
 2a2:	19 f0       	breq	.+6      	; 0x2aa <led_symmetric_shift+0x1b0>
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
 2a6:	1f 4f       	sbci	r17, 0xFF	; 255
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <led_symmetric_shift+0x1b4>
 2aa:	01 50       	subi	r16, 0x01	; 1
 2ac:	11 09       	sbc	r17, r1
 2ae:	e1 14       	cp	r14, r1
 2b0:	f1 04       	cpc	r15, r1
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <led_symmetric_shift+0x1c6>
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 30       	cpi	r16, 0x08	; 8
 2b8:	11 05       	cpc	r17, r1
 2ba:	3c f0       	brlt	.+14     	; 0x2ca <led_symmetric_shift+0x1d0>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	05 c0       	rjmp	.+10     	; 0x2ca <led_symmetric_shift+0x1d0>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	10 16       	cp	r1, r16
 2c4:	11 06       	cpc	r1, r17
 2c6:	0c f0       	brlt	.+2      	; 0x2ca <led_symmetric_shift+0x1d0>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	81 11       	cpse	r24, r1
 2cc:	5e cf       	rjmp	.-324    	; 0x18a <led_symmetric_shift+0x90>
			dir = 0;
		}
	
	}

}
 2ce:	c0 5c       	subi	r28, 0xC0	; 192
 2d0:	df 4f       	sbci	r29, 0xFF	; 255
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	df 90       	pop	r13
 2ea:	cf 90       	pop	r12
 2ec:	bf 90       	pop	r11
 2ee:	af 90       	pop	r10
 2f0:	9f 90       	pop	r9
 2f2:	8f 90       	pop	r8
 2f4:	08 95       	ret

000002f6 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRB |= 0x01 << 6;
 2f6:	84 b1       	in	r24, 0x04	; 4
 2f8:	80 64       	ori	r24, 0x40	; 64
 2fa:	84 b9       	out	0x04, r24	; 4
	
	rgbw_color blueColor = (rgbw_color) { 0, 0, 128, 0 };
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	d0 e8       	ldi	r29, 0x80	; 128
 302:	c0 e0       	ldi	r28, 0x00	; 0
	
    while (1) 
    {
		led_symmetric_shift(blueColor);
 304:	60 2f       	mov	r22, r16
 306:	71 2f       	mov	r23, r17
 308:	8d 2f       	mov	r24, r29
 30a:	9c 2f       	mov	r25, r28
 30c:	f6 de       	rcall	.-532    	; 0xfa <led_symmetric_shift>
 30e:	fa cf       	rjmp	.-12     	; 0x304 <main+0xe>

00000310 <ws2812_setleds_rgbw_PB>:
{
	ws2812_sendarray_mask_PA((uint8_t*)ledarray,leds<<2,0x01<<pin);
	_delay_us(ws2812_resettime);
}
void inline ws2812_setleds_rgbw_PB(uint8_t pin,rgbw_color *ledarray, uint16_t leds)
{
 310:	fb 01       	movw	r30, r22
	ws2812_sendarray_mask_PB((uint8_t*)ledarray,leds<<2,0x01<<pin);
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <ws2812_setleds_rgbw_PB+0xe>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	8a 95       	dec	r24
 320:	e2 f7       	brpl	.-8      	; 0x31a <ws2812_setleds_rgbw_PB+0xa>
 322:	cb 01       	movw	r24, r22
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
void inline ws2812_sendarray_mask_PB(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
	uint8_t curbyte,ctr,masklo;
	uint8_t sreg_prev;

	DDRB |= maskhi; // Enable output
 32c:	94 b1       	in	r25, 0x04	; 4
 32e:	98 2b       	or	r25, r24
 330:	94 b9       	out	0x04, r25	; 4
	masklo	=~maskhi&PORTB;
 332:	95 b1       	in	r25, 0x05	; 5
 334:	78 2f       	mov	r23, r24
 336:	70 95       	com	r23
 338:	79 23       	and	r23, r25
	maskhi |=        PORTB;
 33a:	65 b1       	in	r22, 0x05	; 5
 33c:	68 2b       	or	r22, r24
	
	sreg_prev=SREG;
 33e:	af b7       	in	r26, 0x3f	; 63
 340:	16 c0       	rjmp	.+44     	; 0x36e <loop142+0x20>
	#ifdef interrupt_is_disabled
	cli();
	#endif

	while (datlen--) {
		curbyte=*data++;
 342:	9f 01       	movw	r18, r30
 344:	2f 5f       	subi	r18, 0xFF	; 255
 346:	3f 4f       	sbci	r19, 0xFF	; 255
 348:	40 81       	ld	r20, Z
		
		asm volatile(
 34a:	58 e0       	ldi	r21, 0x08	; 8
 34c:	e8 94       	clt

0000034e <loop142>:
 34e:	65 b9       	out	0x05, r22	; 5
 350:	00 00       	nop
 352:	06 f4       	brtc	.+0      	; 0x354 <loop142+0x6>
 354:	47 ff       	sbrs	r20, 7
 356:	75 b9       	out	0x05, r23	; 5
 358:	44 0f       	add	r20, r20
 35a:	00 00       	nop
 35c:	06 f4       	brtc	.+0      	; 0x35e <loop142+0x10>
 35e:	06 f4       	brtc	.+0      	; 0x360 <loop142+0x12>
 360:	06 f4       	brtc	.+0      	; 0x362 <loop142+0x14>
 362:	75 b9       	out	0x05, r23	; 5
 364:	06 f4       	brtc	.+0      	; 0x366 <loop142+0x18>
 366:	5a 95       	dec	r21
 368:	91 f7       	brne	.-28     	; 0x34e <loop142>
	sreg_prev=SREG;
	#ifdef interrupt_is_disabled
	cli();
	#endif

	while (datlen--) {
 36a:	ac 01       	movw	r20, r24
		curbyte=*data++;
 36c:	f9 01       	movw	r30, r18
	sreg_prev=SREG;
	#ifdef interrupt_is_disabled
	cli();
	#endif

	while (datlen--) {
 36e:	ca 01       	movw	r24, r20
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	45 2b       	or	r20, r21
 374:	31 f7       	brne	.-52     	; 0x342 <ws2812_setleds_rgbw_PB+0x32>
		:	"=&d" (ctr)
		:	"r" (curbyte), "I" (_SFR_IO_ADDR(PORTB)), "r" (maskhi), "r" (masklo)
		);
	}
	
	SREG=sreg_prev;
 376:	af bf       	out	0x3f, r26	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 378:	8f e8       	ldi	r24, 0x8F	; 143
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <loop142+0x2e>
 380:	00 c0       	rjmp	.+0      	; 0x382 <loop142+0x34>
 382:	00 00       	nop
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
