
Test_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  0000091a  000009ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000091a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080020e  0080020e  000009bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d2  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4e  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000921  00000000  00000000  00003218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00003b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000792  00000000  00000000  00003c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cbd  00000000  00000000  00004422  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000050df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e1       	ldi	r30, 0x1A	; 26
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e0       	ldi	r26, 0x0E	; 14
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 34       	cpi	r26, 0x4E	; 78
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d1 d0       	rcall	.+418    	; 0x2c2 <main>
 120:	fa c3       	rjmp	.+2036   	; 0x916 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <tx_char>:
void tx_str(unsigned char *txStr, int len) {
	int i = 0;
	for(i=0; i<len; i++) {
		tx_char(txStr[i]);
	}
}
 124:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 128:	95 ff       	sbrs	r25, 5
 12a:	fc cf       	rjmp	.-8      	; 0x124 <tx_char>
 12c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 130:	08 95       	ret

00000132 <myPrintf>:

void myPrintf(char *fmt,...) {
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	c0 58       	subi	r28, 0x80	; 128
 140:	d1 09       	sbc	r29, r1
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
	va_list arg_ptr;
	uint8_t i, len;
	char sText[128];
	
	/* text buffer */
	for (i=0; i<128; i++) {
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 c0       	rjmp	.+16     	; 0x160 <myPrintf+0x2e>
		sText[i] = 0;
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ec 0f       	add	r30, r28
 156:	fd 1f       	adc	r31, r29
 158:	e8 0f       	add	r30, r24
 15a:	f1 1d       	adc	r31, r1
 15c:	10 82       	st	Z, r1
	va_list arg_ptr;
	uint8_t i, len;
	char sText[128];
	
	/* text buffer */
	for (i=0; i<128; i++) {
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	88 23       	and	r24, r24
 162:	b4 f7       	brge	.-20     	; 0x150 <myPrintf+0x1e>
		sText[i] = 0;
	}
	va_start(arg_ptr, fmt);
	vsprintf(sText, fmt, arg_ptr);
 164:	ae 01       	movw	r20, r28
 166:	46 57       	subi	r20, 0x76	; 118
 168:	5f 4f       	sbci	r21, 0xFF	; 255
 16a:	c8 57       	subi	r28, 0x78	; 120
 16c:	df 4f       	sbci	r29, 0xFF	; 255
 16e:	68 81       	ld	r22, Y
 170:	79 81       	ldd	r23, Y+1	; 0x01
 172:	c8 58       	subi	r28, 0x88	; 136
 174:	d0 40       	sbci	r29, 0x00	; 0
 176:	8e 01       	movw	r16, r28
 178:	0f 5f       	subi	r16, 0xFF	; 255
 17a:	1f 4f       	sbci	r17, 0xFF	; 255
 17c:	c8 01       	movw	r24, r16
 17e:	f6 d0       	rcall	.+492    	; 0x36c <vsprintf>
	va_end(arg_ptr);
	
	len = strlen(sText);
 180:	f8 01       	movw	r30, r16
 182:	01 90       	ld	r0, Z+
 184:	00 20       	and	r0, r0
 186:	e9 f7       	brne	.-6      	; 0x182 <myPrintf+0x50>
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	8e 2f       	mov	r24, r30
 18c:	80 1b       	sub	r24, r16
 18e:	08 2f       	mov	r16, r24
	for(i=0; i<len; i++) {
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <myPrintf+0x74>
		tx_char(sText[i]);
 194:	e1 e0       	ldi	r30, 0x01	; 1
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ec 0f       	add	r30, r28
 19a:	fd 1f       	adc	r31, r29
 19c:	e1 0f       	add	r30, r17
 19e:	f1 1d       	adc	r31, r1
 1a0:	80 81       	ld	r24, Z
 1a2:	c0 df       	rcall	.-128    	; 0x124 <tx_char>
	va_start(arg_ptr, fmt);
	vsprintf(sText, fmt, arg_ptr);
	va_end(arg_ptr);
	
	len = strlen(sText);
	for(i=0; i<len; i++) {
 1a4:	1f 5f       	subi	r17, 0xFF	; 255
 1a6:	10 17       	cp	r17, r16
 1a8:	a8 f3       	brcs	.-22     	; 0x194 <myPrintf+0x62>
		tx_char(sText[i]);
	}
}
 1aa:	c0 58       	subi	r28, 0x80	; 128
 1ac:	df 4f       	sbci	r29, 0xFF	; 255
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <GetADCData>:
	
unsigned int GetADCData(unsigned aIn) {
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	1f 92       	push	r1
 1c8:	1f 92       	push	r1
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned int result;
	
	ADMUX = aIn;
 1ce:	ec e7       	ldi	r30, 0x7C	; 124
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);
 1da:	80 81       	ld	r24, Z
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	80 83       	st	Z, r24
	
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 1e0:	ea e7       	ldi	r30, 0x7A	; 122
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	87 e8       	ldi	r24, 0x87	; 135
 1e6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 1e8:	80 81       	ld	r24, Z
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	80 83       	st	Z, r24
	
	while(!(ADCSRA & (1<<ADIF)));
 1ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 1f2:	84 ff       	sbrs	r24, 4
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <GetADCData+0x2c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f6:	80 eb       	ldi	r24, 0xB0	; 176
 1f8:	94 e0       	ldi	r25, 0x04	; 4
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <GetADCData+0x38>
	_delay_us(300);
	
	//result = ADCL + (ADCH << 8);
	result = (ADCL >> 6) + (ADCH << 2);
 1fe:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 202:	22 95       	swap	r18
 204:	26 95       	lsr	r18
 206:	26 95       	lsr	r18
 208:	23 70       	andi	r18, 0x03	; 3
 20a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	82 0f       	add	r24, r18
 21a:	91 1d       	adc	r25, r1
 21c:	9a 83       	std	Y+2, r25	; 0x02
 21e:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = 0x00;
 220:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
	
	myPrintf("ADC : %d\n", result);
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	9a 81       	ldd	r25, Y+2	; 0x02
 228:	9f 93       	push	r25
 22a:	8f 93       	push	r24
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	9f 93       	push	r25
 232:	8f 93       	push	r24
 234:	7e df       	rcall	.-260    	; 0x132 <myPrintf>
	
	return result;
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	9a 81       	ldd	r25, Y+2	; 0x02
}
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <neo_shift>:

void neo_shift(unsigned int _value) {
	
	for(int i=0; i<LED_COUNT; i++) {
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	2e c0       	rjmp	.+92     	; 0x2ae <neo_shift+0x62>
		
		if(i <= (_value / 64)) currentColor[i] = blueColor;
 252:	ac 01       	movw	r20, r24
 254:	00 24       	eor	r0, r0
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	00 1c       	adc	r0, r0
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	00 1c       	adc	r0, r0
 262:	45 2f       	mov	r20, r21
 264:	50 2d       	mov	r21, r0
 266:	42 17       	cp	r20, r18
 268:	53 07       	cpc	r21, r19
 26a:	a0 f0       	brcs	.+40     	; 0x294 <neo_shift+0x48>
 26c:	f9 01       	movw	r30, r18
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	e2 5f       	subi	r30, 0xF2	; 242
 278:	fd 4f       	sbci	r31, 0xFD	; 253
 27a:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 27e:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 282:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 286:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 28a:	40 83       	st	Z, r20
 28c:	51 83       	std	Z+1, r21	; 0x01
 28e:	62 83       	std	Z+2, r22	; 0x02
 290:	73 83       	std	Z+3, r23	; 0x03
 292:	0b c0       	rjmp	.+22     	; 0x2aa <neo_shift+0x5e>
		else currentColor[i] = (rgbw_color) {0,0,0,0};
 294:	f9 01       	movw	r30, r18
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	ee 0f       	add	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	e2 5f       	subi	r30, 0xF2	; 242
 2a0:	fd 4f       	sbci	r31, 0xFD	; 253
 2a2:	10 82       	st	Z, r1
 2a4:	11 82       	std	Z+1, r1	; 0x01
 2a6:	12 82       	std	Z+2, r1	; 0x02
 2a8:	13 82       	std	Z+3, r1	; 0x03
	return result;
}

void neo_shift(unsigned int _value) {
	
	for(int i=0; i<LED_COUNT; i++) {
 2aa:	2f 5f       	subi	r18, 0xFF	; 255
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
 2ae:	20 31       	cpi	r18, 0x10	; 16
 2b0:	31 05       	cpc	r19, r1
 2b2:	7c f2       	brlt	.-98     	; 0x252 <neo_shift+0x6>
		if(i <= (_value / 64)) currentColor[i] = blueColor;
		else currentColor[i] = (rgbw_color) {0,0,0,0};
		
	}
	
	ws2812_setleds_rgbw_PB(4, currentColor, LED_COUNT);
 2b4:	40 e1       	ldi	r20, 0x10	; 16
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	6e e0       	ldi	r22, 0x0E	; 14
 2ba:	72 e0       	ldi	r23, 0x02	; 2
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	1b c0       	rjmp	.+54     	; 0x2f6 <ws2812_setleds_rgbw_PB>
 2c0:	08 95       	ret

000002c2 <main>:

int main(void)
{
    /* Replace with your application code */
	
		UBRR1H = (unsigned char) (BAUD_9600 >> 8);
 2c2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
		UBRR1L = (unsigned char) BAUD_9600;
 2c6:	87 e6       	ldi	r24, 0x67	; 103
 2c8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
		UCSR1B = (1 << TXEN1) | (1 << RXEN1);
 2cc:	88 e1       	ldi	r24, 0x18	; 24
 2ce:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
		UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
	
    while (1) 
    {
		unsigned int adc_value = GetADCData(4);
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	72 df       	rcall	.-284    	; 0x1c2 <GetADCData>
		neo_shift(adc_value);
 2de:	b6 df       	rcall	.-148    	; 0x24c <neo_shift>
 2e0:	88 ee       	ldi	r24, 0xE8	; 232
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2e2:	93 e0       	ldi	r25, 0x03	; 3
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <main+0x2e>
 2e6:	e0 e9       	ldi	r30, 0x90	; 144
 2e8:	f1 e0       	ldi	r31, 0x01	; 1
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x28>
 2ee:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f0:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f2:	c9 f7       	brne	.-14     	; 0x2e6 <main+0x24>
 2f4:	f1 cf       	rjmp	.-30     	; 0x2d8 <main+0x16>

000002f6 <ws2812_setleds_rgbw_PB>:
 2f6:	fb 01       	movw	r30, r22
	ws2812_sendarray_mask_PA((uint8_t*)ledarray,leds<<2,0x01<<pin);
	_delay_us(ws2812_resettime);
}
void inline ws2812_setleds_rgbw_PB(uint8_t pin,rgbw_color *ledarray, uint16_t leds)
{
	ws2812_sendarray_mask_PB((uint8_t*)ledarray,leds<<2,0x01<<pin);
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	b9 01       	movw	r22, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <ws2812_setleds_rgbw_PB+0xe>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	8a 95       	dec	r24
 306:	e2 f7       	brpl	.-8      	; 0x300 <ws2812_setleds_rgbw_PB+0xa>
 308:	cb 01       	movw	r24, r22
 30a:	44 0f       	add	r20, r20
 30c:	55 1f       	adc	r21, r21
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
void inline ws2812_sendarray_mask_PB(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
	uint8_t curbyte,ctr,masklo;
	uint8_t sreg_prev;

	DDRB |= maskhi; // Enable output
 312:	94 b1       	in	r25, 0x04	; 4
 314:	98 2b       	or	r25, r24
 316:	94 b9       	out	0x04, r25	; 4
	masklo	=~maskhi&PORTB;
 318:	95 b1       	in	r25, 0x05	; 5
 31a:	78 2f       	mov	r23, r24
 31c:	70 95       	com	r23
 31e:	79 23       	and	r23, r25
	maskhi |=        PORTB;
 320:	65 b1       	in	r22, 0x05	; 5
 322:	68 2b       	or	r22, r24
	
	sreg_prev=SREG;
 324:	af b7       	in	r26, 0x3f	; 63
 326:	16 c0       	rjmp	.+44     	; 0x354 <loop142+0x20>
	#ifdef interrupt_is_disabled
	cli();
	#endif

	while (datlen--) {
		curbyte=*data++;
 328:	9f 01       	movw	r18, r30
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	40 81       	ld	r20, Z
		
		asm volatile(
 330:	58 e0       	ldi	r21, 0x08	; 8
 332:	e8 94       	clt

00000334 <loop142>:
 334:	65 b9       	out	0x05, r22	; 5
 336:	00 00       	nop
 338:	06 f4       	brtc	.+0      	; 0x33a <loop142+0x6>
 33a:	47 ff       	sbrs	r20, 7
 33c:	75 b9       	out	0x05, r23	; 5
 33e:	44 0f       	add	r20, r20
 340:	00 00       	nop
 342:	06 f4       	brtc	.+0      	; 0x344 <loop142+0x10>
 344:	06 f4       	brtc	.+0      	; 0x346 <loop142+0x12>
 346:	06 f4       	brtc	.+0      	; 0x348 <loop142+0x14>
 348:	75 b9       	out	0x05, r23	; 5
 34a:	06 f4       	brtc	.+0      	; 0x34c <loop142+0x18>
 34c:	5a 95       	dec	r21
 34e:	91 f7       	brne	.-28     	; 0x334 <loop142>
	sreg_prev=SREG;
	#ifdef interrupt_is_disabled
	cli();
	#endif

	while (datlen--) {
 350:	ac 01       	movw	r20, r24
		curbyte=*data++;
 352:	f9 01       	movw	r30, r18
	sreg_prev=SREG;
	#ifdef interrupt_is_disabled
	cli();
	#endif

	while (datlen--) {
 354:	ca 01       	movw	r24, r20
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	45 2b       	or	r20, r21
 35a:	31 f7       	brne	.-52     	; 0x328 <ws2812_setleds_rgbw_PB+0x32>
		:	"=&d" (ctr)
		:	"r" (curbyte), "I" (_SFR_IO_ADDR(PORTB)), "r" (maskhi), "r" (masklo)
		);
	}
	
	SREG=sreg_prev;
 35c:	af bf       	out	0x3f, r26	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35e:	8f e8       	ldi	r24, 0x8F	; 143
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <loop142+0x2e>
 366:	00 c0       	rjmp	.+0      	; 0x368 <loop142+0x34>
 368:	00 00       	nop
 36a:	08 95       	ret

0000036c <vsprintf>:
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	2e 97       	sbiw	r28, 0x0e	; 14
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
 384:	8c 01       	movw	r16, r24
 386:	86 e0       	ldi	r24, 0x06	; 6
 388:	8c 83       	std	Y+4, r24	; 0x04
 38a:	1a 83       	std	Y+2, r17	; 0x02
 38c:	09 83       	std	Y+1, r16	; 0x01
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	9f e7       	ldi	r25, 0x7F	; 127
 392:	9e 83       	std	Y+6, r25	; 0x06
 394:	8d 83       	std	Y+5, r24	; 0x05
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	10 d0       	rcall	.+32     	; 0x3bc <vfprintf>
 39c:	ef 81       	ldd	r30, Y+7	; 0x07
 39e:	f8 85       	ldd	r31, Y+8	; 0x08
 3a0:	e0 0f       	add	r30, r16
 3a2:	f1 1f       	adc	r31, r17
 3a4:	10 82       	st	Z, r1
 3a6:	2e 96       	adiw	r28, 0x0e	; 14
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	de bf       	out	0x3e, r29	; 62
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	cd bf       	out	0x3d, r28	; 61
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <vfprintf>:
 3bc:	2f 92       	push	r2
 3be:	3f 92       	push	r3
 3c0:	4f 92       	push	r4
 3c2:	5f 92       	push	r5
 3c4:	6f 92       	push	r6
 3c6:	7f 92       	push	r7
 3c8:	8f 92       	push	r8
 3ca:	9f 92       	push	r9
 3cc:	af 92       	push	r10
 3ce:	bf 92       	push	r11
 3d0:	cf 92       	push	r12
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	2b 97       	sbiw	r28, 0x0b	; 11
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	6c 01       	movw	r12, r24
 3f2:	7b 01       	movw	r14, r22
 3f4:	8a 01       	movw	r16, r20
 3f6:	fc 01       	movw	r30, r24
 3f8:	17 82       	std	Z+7, r1	; 0x07
 3fa:	16 82       	std	Z+6, r1	; 0x06
 3fc:	83 81       	ldd	r24, Z+3	; 0x03
 3fe:	81 ff       	sbrs	r24, 1
 400:	bf c1       	rjmp	.+894    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
 402:	ce 01       	movw	r24, r28
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	3c 01       	movw	r6, r24
 408:	f6 01       	movw	r30, r12
 40a:	93 81       	ldd	r25, Z+3	; 0x03
 40c:	f7 01       	movw	r30, r14
 40e:	93 fd       	sbrc	r25, 3
 410:	85 91       	lpm	r24, Z+
 412:	93 ff       	sbrs	r25, 3
 414:	81 91       	ld	r24, Z+
 416:	7f 01       	movw	r14, r30
 418:	88 23       	and	r24, r24
 41a:	09 f4       	brne	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	ad c1       	rjmp	.+858    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
 41e:	85 32       	cpi	r24, 0x25	; 37
 420:	39 f4       	brne	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 422:	93 fd       	sbrc	r25, 3
 424:	85 91       	lpm	r24, Z+
 426:	93 ff       	sbrs	r25, 3
 428:	81 91       	ld	r24, Z+
 42a:	7f 01       	movw	r14, r30
 42c:	85 32       	cpi	r24, 0x25	; 37
 42e:	21 f4       	brne	.+8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 430:	b6 01       	movw	r22, r12
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	d6 d1       	rcall	.+940    	; 0x7e2 <fputc>
 436:	e8 cf       	rjmp	.-48     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 438:	91 2c       	mov	r9, r1
 43a:	21 2c       	mov	r2, r1
 43c:	31 2c       	mov	r3, r1
 43e:	ff e1       	ldi	r31, 0x1F	; 31
 440:	f3 15       	cp	r31, r3
 442:	d8 f0       	brcs	.+54     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 444:	8b 32       	cpi	r24, 0x2B	; 43
 446:	79 f0       	breq	.+30     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 448:	38 f4       	brcc	.+14     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44a:	80 32       	cpi	r24, 0x20	; 32
 44c:	79 f0       	breq	.+30     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 44e:	83 32       	cpi	r24, 0x23	; 35
 450:	a1 f4       	brne	.+40     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 452:	23 2d       	mov	r18, r3
 454:	20 61       	ori	r18, 0x10	; 16
 456:	1d c0       	rjmp	.+58     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 458:	8d 32       	cpi	r24, 0x2D	; 45
 45a:	61 f0       	breq	.+24     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 45c:	80 33       	cpi	r24, 0x30	; 48
 45e:	69 f4       	brne	.+26     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 460:	23 2d       	mov	r18, r3
 462:	21 60       	ori	r18, 0x01	; 1
 464:	16 c0       	rjmp	.+44     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 466:	83 2d       	mov	r24, r3
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	38 2e       	mov	r3, r24
 46c:	e3 2d       	mov	r30, r3
 46e:	e4 60       	ori	r30, 0x04	; 4
 470:	3e 2e       	mov	r3, r30
 472:	2a c0       	rjmp	.+84     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 474:	f3 2d       	mov	r31, r3
 476:	f8 60       	ori	r31, 0x08	; 8
 478:	1d c0       	rjmp	.+58     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 47a:	37 fc       	sbrc	r3, 7
 47c:	2d c0       	rjmp	.+90     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 47e:	20 ed       	ldi	r18, 0xD0	; 208
 480:	28 0f       	add	r18, r24
 482:	2a 30       	cpi	r18, 0x0A	; 10
 484:	40 f0       	brcs	.+16     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 486:	8e 32       	cpi	r24, 0x2E	; 46
 488:	b9 f4       	brne	.+46     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 48a:	36 fc       	sbrc	r3, 6
 48c:	75 c1       	rjmp	.+746    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
 48e:	23 2d       	mov	r18, r3
 490:	20 64       	ori	r18, 0x40	; 64
 492:	32 2e       	mov	r3, r18
 494:	19 c0       	rjmp	.+50     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 496:	36 fe       	sbrs	r3, 6
 498:	06 c0       	rjmp	.+12     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49a:	8a e0       	ldi	r24, 0x0A	; 10
 49c:	98 9e       	mul	r9, r24
 49e:	20 0d       	add	r18, r0
 4a0:	11 24       	eor	r1, r1
 4a2:	92 2e       	mov	r9, r18
 4a4:	11 c0       	rjmp	.+34     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4a6:	ea e0       	ldi	r30, 0x0A	; 10
 4a8:	2e 9e       	mul	r2, r30
 4aa:	20 0d       	add	r18, r0
 4ac:	11 24       	eor	r1, r1
 4ae:	22 2e       	mov	r2, r18
 4b0:	f3 2d       	mov	r31, r3
 4b2:	f0 62       	ori	r31, 0x20	; 32
 4b4:	3f 2e       	mov	r3, r31
 4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4b8:	8c 36       	cpi	r24, 0x6C	; 108
 4ba:	21 f4       	brne	.+8      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4bc:	83 2d       	mov	r24, r3
 4be:	80 68       	ori	r24, 0x80	; 128
 4c0:	38 2e       	mov	r3, r24
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c4:	88 36       	cpi	r24, 0x68	; 104
 4c6:	41 f4       	brne	.+16     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4c8:	f7 01       	movw	r30, r14
 4ca:	93 fd       	sbrc	r25, 3
 4cc:	85 91       	lpm	r24, Z+
 4ce:	93 ff       	sbrs	r25, 3
 4d0:	81 91       	ld	r24, Z+
 4d2:	7f 01       	movw	r14, r30
 4d4:	81 11       	cpse	r24, r1
 4d6:	b3 cf       	rjmp	.-154    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 4d8:	98 2f       	mov	r25, r24
 4da:	9f 7d       	andi	r25, 0xDF	; 223
 4dc:	95 54       	subi	r25, 0x45	; 69
 4de:	93 30       	cpi	r25, 0x03	; 3
 4e0:	28 f4       	brcc	.+10     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4e2:	0c 5f       	subi	r16, 0xFC	; 252
 4e4:	1f 4f       	sbci	r17, 0xFF	; 255
 4e6:	9f e3       	ldi	r25, 0x3F	; 63
 4e8:	99 83       	std	Y+1, r25	; 0x01
 4ea:	0d c0       	rjmp	.+26     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4ec:	83 36       	cpi	r24, 0x63	; 99
 4ee:	31 f0       	breq	.+12     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f0:	83 37       	cpi	r24, 0x73	; 115
 4f2:	71 f0       	breq	.+28     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 4f4:	83 35       	cpi	r24, 0x53	; 83
 4f6:	09 f0       	breq	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f8:	55 c0       	rjmp	.+170    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 4fa:	20 c0       	rjmp	.+64     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 4fc:	f8 01       	movw	r30, r16
 4fe:	80 81       	ld	r24, Z
 500:	89 83       	std	Y+1, r24	; 0x01
 502:	0e 5f       	subi	r16, 0xFE	; 254
 504:	1f 4f       	sbci	r17, 0xFF	; 255
 506:	88 24       	eor	r8, r8
 508:	83 94       	inc	r8
 50a:	91 2c       	mov	r9, r1
 50c:	53 01       	movw	r10, r6
 50e:	12 c0       	rjmp	.+36     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 510:	28 01       	movw	r4, r16
 512:	f2 e0       	ldi	r31, 0x02	; 2
 514:	4f 0e       	add	r4, r31
 516:	51 1c       	adc	r5, r1
 518:	f8 01       	movw	r30, r16
 51a:	a0 80       	ld	r10, Z
 51c:	b1 80       	ldd	r11, Z+1	; 0x01
 51e:	36 fe       	sbrs	r3, 6
 520:	03 c0       	rjmp	.+6      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 522:	69 2d       	mov	r22, r9
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 528:	6f ef       	ldi	r22, 0xFF	; 255
 52a:	7f ef       	ldi	r23, 0xFF	; 255
 52c:	c5 01       	movw	r24, r10
 52e:	4e d1       	rcall	.+668    	; 0x7cc <strnlen>
 530:	4c 01       	movw	r8, r24
 532:	82 01       	movw	r16, r4
 534:	f3 2d       	mov	r31, r3
 536:	ff 77       	andi	r31, 0x7F	; 127
 538:	3f 2e       	mov	r3, r31
 53a:	15 c0       	rjmp	.+42     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 53c:	28 01       	movw	r4, r16
 53e:	22 e0       	ldi	r18, 0x02	; 2
 540:	42 0e       	add	r4, r18
 542:	51 1c       	adc	r5, r1
 544:	f8 01       	movw	r30, r16
 546:	a0 80       	ld	r10, Z
 548:	b1 80       	ldd	r11, Z+1	; 0x01
 54a:	36 fe       	sbrs	r3, 6
 54c:	03 c0       	rjmp	.+6      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 54e:	69 2d       	mov	r22, r9
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 554:	6f ef       	ldi	r22, 0xFF	; 255
 556:	7f ef       	ldi	r23, 0xFF	; 255
 558:	c5 01       	movw	r24, r10
 55a:	2d d1       	rcall	.+602    	; 0x7b6 <strnlen_P>
 55c:	4c 01       	movw	r8, r24
 55e:	f3 2d       	mov	r31, r3
 560:	f0 68       	ori	r31, 0x80	; 128
 562:	3f 2e       	mov	r3, r31
 564:	82 01       	movw	r16, r4
 566:	33 fc       	sbrc	r3, 3
 568:	19 c0       	rjmp	.+50     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 56a:	82 2d       	mov	r24, r2
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	88 16       	cp	r8, r24
 570:	99 06       	cpc	r9, r25
 572:	a0 f4       	brcc	.+40     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 574:	b6 01       	movw	r22, r12
 576:	80 e2       	ldi	r24, 0x20	; 32
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	33 d1       	rcall	.+614    	; 0x7e2 <fputc>
 57c:	2a 94       	dec	r2
 57e:	f5 cf       	rjmp	.-22     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 580:	f5 01       	movw	r30, r10
 582:	37 fc       	sbrc	r3, 7
 584:	85 91       	lpm	r24, Z+
 586:	37 fe       	sbrs	r3, 7
 588:	81 91       	ld	r24, Z+
 58a:	5f 01       	movw	r10, r30
 58c:	b6 01       	movw	r22, r12
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	28 d1       	rcall	.+592    	; 0x7e2 <fputc>
 592:	21 10       	cpse	r2, r1
 594:	2a 94       	dec	r2
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	82 1a       	sub	r8, r18
 59a:	91 08       	sbc	r9, r1
 59c:	81 14       	cp	r8, r1
 59e:	91 04       	cpc	r9, r1
 5a0:	79 f7       	brne	.-34     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 5a2:	e1 c0       	rjmp	.+450    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 5a4:	84 36       	cpi	r24, 0x64	; 100
 5a6:	11 f0       	breq	.+4      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5a8:	89 36       	cpi	r24, 0x69	; 105
 5aa:	39 f5       	brne	.+78     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5ac:	f8 01       	movw	r30, r16
 5ae:	37 fe       	sbrs	r3, 7
 5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5b2:	60 81       	ld	r22, Z
 5b4:	71 81       	ldd	r23, Z+1	; 0x01
 5b6:	82 81       	ldd	r24, Z+2	; 0x02
 5b8:	93 81       	ldd	r25, Z+3	; 0x03
 5ba:	0c 5f       	subi	r16, 0xFC	; 252
 5bc:	1f 4f       	sbci	r17, 0xFF	; 255
 5be:	08 c0       	rjmp	.+16     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5c0:	60 81       	ld	r22, Z
 5c2:	71 81       	ldd	r23, Z+1	; 0x01
 5c4:	07 2e       	mov	r0, r23
 5c6:	00 0c       	add	r0, r0
 5c8:	88 0b       	sbc	r24, r24
 5ca:	99 0b       	sbc	r25, r25
 5cc:	0e 5f       	subi	r16, 0xFE	; 254
 5ce:	1f 4f       	sbci	r17, 0xFF	; 255
 5d0:	f3 2d       	mov	r31, r3
 5d2:	ff 76       	andi	r31, 0x6F	; 111
 5d4:	3f 2e       	mov	r3, r31
 5d6:	97 ff       	sbrs	r25, 7
 5d8:	09 c0       	rjmp	.+18     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5da:	90 95       	com	r25
 5dc:	80 95       	com	r24
 5de:	70 95       	com	r23
 5e0:	61 95       	neg	r22
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	f0 68       	ori	r31, 0x80	; 128
 5ea:	3f 2e       	mov	r3, r31
 5ec:	2a e0       	ldi	r18, 0x0A	; 10
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	a3 01       	movw	r20, r6
 5f2:	33 d1       	rcall	.+614    	; 0x85a <__ultoa_invert>
 5f4:	88 2e       	mov	r8, r24
 5f6:	86 18       	sub	r8, r6
 5f8:	44 c0       	rjmp	.+136    	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 5fa:	85 37       	cpi	r24, 0x75	; 117
 5fc:	31 f4       	brne	.+12     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5fe:	23 2d       	mov	r18, r3
 600:	2f 7e       	andi	r18, 0xEF	; 239
 602:	b2 2e       	mov	r11, r18
 604:	2a e0       	ldi	r18, 0x0A	; 10
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	25 c0       	rjmp	.+74     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 60a:	93 2d       	mov	r25, r3
 60c:	99 7f       	andi	r25, 0xF9	; 249
 60e:	b9 2e       	mov	r11, r25
 610:	8f 36       	cpi	r24, 0x6F	; 111
 612:	c1 f0       	breq	.+48     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 614:	18 f4       	brcc	.+6      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 616:	88 35       	cpi	r24, 0x58	; 88
 618:	79 f0       	breq	.+30     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 61a:	ae c0       	rjmp	.+348    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
 61c:	80 37       	cpi	r24, 0x70	; 112
 61e:	19 f0       	breq	.+6      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 620:	88 37       	cpi	r24, 0x78	; 120
 622:	21 f0       	breq	.+8      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 624:	a9 c0       	rjmp	.+338    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
 626:	e9 2f       	mov	r30, r25
 628:	e0 61       	ori	r30, 0x10	; 16
 62a:	be 2e       	mov	r11, r30
 62c:	b4 fe       	sbrs	r11, 4
 62e:	0d c0       	rjmp	.+26     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 630:	fb 2d       	mov	r31, r11
 632:	f4 60       	ori	r31, 0x04	; 4
 634:	bf 2e       	mov	r11, r31
 636:	09 c0       	rjmp	.+18     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 638:	34 fe       	sbrs	r3, 4
 63a:	0a c0       	rjmp	.+20     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 63c:	29 2f       	mov	r18, r25
 63e:	26 60       	ori	r18, 0x06	; 6
 640:	b2 2e       	mov	r11, r18
 642:	06 c0       	rjmp	.+12     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 644:	28 e0       	ldi	r18, 0x08	; 8
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	05 c0       	rjmp	.+10     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 64a:	20 e1       	ldi	r18, 0x10	; 16
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 650:	20 e1       	ldi	r18, 0x10	; 16
 652:	32 e0       	ldi	r19, 0x02	; 2
 654:	f8 01       	movw	r30, r16
 656:	b7 fe       	sbrs	r11, 7
 658:	07 c0       	rjmp	.+14     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 65a:	60 81       	ld	r22, Z
 65c:	71 81       	ldd	r23, Z+1	; 0x01
 65e:	82 81       	ldd	r24, Z+2	; 0x02
 660:	93 81       	ldd	r25, Z+3	; 0x03
 662:	0c 5f       	subi	r16, 0xFC	; 252
 664:	1f 4f       	sbci	r17, 0xFF	; 255
 666:	06 c0       	rjmp	.+12     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 668:	60 81       	ld	r22, Z
 66a:	71 81       	ldd	r23, Z+1	; 0x01
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 5f       	subi	r16, 0xFE	; 254
 672:	1f 4f       	sbci	r17, 0xFF	; 255
 674:	a3 01       	movw	r20, r6
 676:	f1 d0       	rcall	.+482    	; 0x85a <__ultoa_invert>
 678:	88 2e       	mov	r8, r24
 67a:	86 18       	sub	r8, r6
 67c:	fb 2d       	mov	r31, r11
 67e:	ff 77       	andi	r31, 0x7F	; 127
 680:	3f 2e       	mov	r3, r31
 682:	36 fe       	sbrs	r3, 6
 684:	0d c0       	rjmp	.+26     	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 686:	23 2d       	mov	r18, r3
 688:	2e 7f       	andi	r18, 0xFE	; 254
 68a:	a2 2e       	mov	r10, r18
 68c:	89 14       	cp	r8, r9
 68e:	58 f4       	brcc	.+22     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 690:	34 fe       	sbrs	r3, 4
 692:	0b c0       	rjmp	.+22     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 694:	32 fc       	sbrc	r3, 2
 696:	09 c0       	rjmp	.+18     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 698:	83 2d       	mov	r24, r3
 69a:	8e 7e       	andi	r24, 0xEE	; 238
 69c:	a8 2e       	mov	r10, r24
 69e:	05 c0       	rjmp	.+10     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 6a0:	b8 2c       	mov	r11, r8
 6a2:	a3 2c       	mov	r10, r3
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 6a6:	b8 2c       	mov	r11, r8
 6a8:	01 c0       	rjmp	.+2      	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 6aa:	b9 2c       	mov	r11, r9
 6ac:	a4 fe       	sbrs	r10, 4
 6ae:	0f c0       	rjmp	.+30     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6b0:	fe 01       	movw	r30, r28
 6b2:	e8 0d       	add	r30, r8
 6b4:	f1 1d       	adc	r31, r1
 6b6:	80 81       	ld	r24, Z
 6b8:	80 33       	cpi	r24, 0x30	; 48
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6bc:	9a 2d       	mov	r25, r10
 6be:	99 7e       	andi	r25, 0xE9	; 233
 6c0:	a9 2e       	mov	r10, r25
 6c2:	09 c0       	rjmp	.+18     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6c4:	a2 fe       	sbrs	r10, 2
 6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
 6c8:	b3 94       	inc	r11
 6ca:	b3 94       	inc	r11
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6ce:	8a 2d       	mov	r24, r10
 6d0:	86 78       	andi	r24, 0x86	; 134
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6d4:	b3 94       	inc	r11
 6d6:	a3 fc       	sbrc	r10, 3
 6d8:	10 c0       	rjmp	.+32     	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 6da:	a0 fe       	sbrs	r10, 0
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6de:	b2 14       	cp	r11, r2
 6e0:	80 f4       	brcc	.+32     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 6e2:	28 0c       	add	r2, r8
 6e4:	92 2c       	mov	r9, r2
 6e6:	9b 18       	sub	r9, r11
 6e8:	0d c0       	rjmp	.+26     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 6ea:	b2 14       	cp	r11, r2
 6ec:	58 f4       	brcc	.+22     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 6ee:	b6 01       	movw	r22, r12
 6f0:	80 e2       	ldi	r24, 0x20	; 32
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	76 d0       	rcall	.+236    	; 0x7e2 <fputc>
 6f6:	b3 94       	inc	r11
 6f8:	f8 cf       	rjmp	.-16     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6fa:	b2 14       	cp	r11, r2
 6fc:	18 f4       	brcc	.+6      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 6fe:	2b 18       	sub	r2, r11
 700:	02 c0       	rjmp	.+4      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 702:	98 2c       	mov	r9, r8
 704:	21 2c       	mov	r2, r1
 706:	a4 fe       	sbrs	r10, 4
 708:	0f c0       	rjmp	.+30     	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 70a:	b6 01       	movw	r22, r12
 70c:	80 e3       	ldi	r24, 0x30	; 48
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	68 d0       	rcall	.+208    	; 0x7e2 <fputc>
 712:	a2 fe       	sbrs	r10, 2
 714:	16 c0       	rjmp	.+44     	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 716:	a1 fc       	sbrc	r10, 1
 718:	03 c0       	rjmp	.+6      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 71a:	88 e7       	ldi	r24, 0x78	; 120
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 720:	88 e5       	ldi	r24, 0x58	; 88
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	b6 01       	movw	r22, r12
 726:	0c c0       	rjmp	.+24     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 728:	8a 2d       	mov	r24, r10
 72a:	86 78       	andi	r24, 0x86	; 134
 72c:	51 f0       	breq	.+20     	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 72e:	a1 fe       	sbrs	r10, 1
 730:	02 c0       	rjmp	.+4      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 732:	8b e2       	ldi	r24, 0x2B	; 43
 734:	01 c0       	rjmp	.+2      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 736:	80 e2       	ldi	r24, 0x20	; 32
 738:	a7 fc       	sbrc	r10, 7
 73a:	8d e2       	ldi	r24, 0x2D	; 45
 73c:	b6 01       	movw	r22, r12
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	50 d0       	rcall	.+160    	; 0x7e2 <fputc>
 742:	89 14       	cp	r8, r9
 744:	30 f4       	brcc	.+12     	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
 746:	b6 01       	movw	r22, r12
 748:	80 e3       	ldi	r24, 0x30	; 48
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	4a d0       	rcall	.+148    	; 0x7e2 <fputc>
 74e:	9a 94       	dec	r9
 750:	f8 cf       	rjmp	.-16     	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 752:	8a 94       	dec	r8
 754:	f3 01       	movw	r30, r6
 756:	e8 0d       	add	r30, r8
 758:	f1 1d       	adc	r31, r1
 75a:	80 81       	ld	r24, Z
 75c:	b6 01       	movw	r22, r12
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	40 d0       	rcall	.+128    	; 0x7e2 <fputc>
 762:	81 10       	cpse	r8, r1
 764:	f6 cf       	rjmp	.-20     	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
 766:	22 20       	and	r2, r2
 768:	09 f4       	brne	.+2      	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
 76a:	4e ce       	rjmp	.-868    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 76c:	b6 01       	movw	r22, r12
 76e:	80 e2       	ldi	r24, 0x20	; 32
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	37 d0       	rcall	.+110    	; 0x7e2 <fputc>
 774:	2a 94       	dec	r2
 776:	f7 cf       	rjmp	.-18     	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 778:	f6 01       	movw	r30, r12
 77a:	86 81       	ldd	r24, Z+6	; 0x06
 77c:	97 81       	ldd	r25, Z+7	; 0x07
 77e:	02 c0       	rjmp	.+4      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	9f ef       	ldi	r25, 0xFF	; 255
 784:	2b 96       	adiw	r28, 0x0b	; 11
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	0f 91       	pop	r16
 798:	ff 90       	pop	r15
 79a:	ef 90       	pop	r14
 79c:	df 90       	pop	r13
 79e:	cf 90       	pop	r12
 7a0:	bf 90       	pop	r11
 7a2:	af 90       	pop	r10
 7a4:	9f 90       	pop	r9
 7a6:	8f 90       	pop	r8
 7a8:	7f 90       	pop	r7
 7aa:	6f 90       	pop	r6
 7ac:	5f 90       	pop	r5
 7ae:	4f 90       	pop	r4
 7b0:	3f 90       	pop	r3
 7b2:	2f 90       	pop	r2
 7b4:	08 95       	ret

000007b6 <strnlen_P>:
 7b6:	fc 01       	movw	r30, r24
 7b8:	05 90       	lpm	r0, Z+
 7ba:	61 50       	subi	r22, 0x01	; 1
 7bc:	70 40       	sbci	r23, 0x00	; 0
 7be:	01 10       	cpse	r0, r1
 7c0:	d8 f7       	brcc	.-10     	; 0x7b8 <strnlen_P+0x2>
 7c2:	80 95       	com	r24
 7c4:	90 95       	com	r25
 7c6:	8e 0f       	add	r24, r30
 7c8:	9f 1f       	adc	r25, r31
 7ca:	08 95       	ret

000007cc <strnlen>:
 7cc:	fc 01       	movw	r30, r24
 7ce:	61 50       	subi	r22, 0x01	; 1
 7d0:	70 40       	sbci	r23, 0x00	; 0
 7d2:	01 90       	ld	r0, Z+
 7d4:	01 10       	cpse	r0, r1
 7d6:	d8 f7       	brcc	.-10     	; 0x7ce <strnlen+0x2>
 7d8:	80 95       	com	r24
 7da:	90 95       	com	r25
 7dc:	8e 0f       	add	r24, r30
 7de:	9f 1f       	adc	r25, r31
 7e0:	08 95       	ret

000007e2 <fputc>:
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	fb 01       	movw	r30, r22
 7ec:	23 81       	ldd	r18, Z+3	; 0x03
 7ee:	21 fd       	sbrc	r18, 1
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <fputc+0x16>
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	9f ef       	ldi	r25, 0xFF	; 255
 7f6:	2c c0       	rjmp	.+88     	; 0x850 <fputc+0x6e>
 7f8:	22 ff       	sbrs	r18, 2
 7fa:	16 c0       	rjmp	.+44     	; 0x828 <fputc+0x46>
 7fc:	46 81       	ldd	r20, Z+6	; 0x06
 7fe:	57 81       	ldd	r21, Z+7	; 0x07
 800:	24 81       	ldd	r18, Z+4	; 0x04
 802:	35 81       	ldd	r19, Z+5	; 0x05
 804:	42 17       	cp	r20, r18
 806:	53 07       	cpc	r21, r19
 808:	44 f4       	brge	.+16     	; 0x81a <fputc+0x38>
 80a:	a0 81       	ld	r26, Z
 80c:	b1 81       	ldd	r27, Z+1	; 0x01
 80e:	9d 01       	movw	r18, r26
 810:	2f 5f       	subi	r18, 0xFF	; 255
 812:	3f 4f       	sbci	r19, 0xFF	; 255
 814:	31 83       	std	Z+1, r19	; 0x01
 816:	20 83       	st	Z, r18
 818:	8c 93       	st	X, r24
 81a:	26 81       	ldd	r18, Z+6	; 0x06
 81c:	37 81       	ldd	r19, Z+7	; 0x07
 81e:	2f 5f       	subi	r18, 0xFF	; 255
 820:	3f 4f       	sbci	r19, 0xFF	; 255
 822:	37 83       	std	Z+7, r19	; 0x07
 824:	26 83       	std	Z+6, r18	; 0x06
 826:	14 c0       	rjmp	.+40     	; 0x850 <fputc+0x6e>
 828:	8b 01       	movw	r16, r22
 82a:	ec 01       	movw	r28, r24
 82c:	fb 01       	movw	r30, r22
 82e:	00 84       	ldd	r0, Z+8	; 0x08
 830:	f1 85       	ldd	r31, Z+9	; 0x09
 832:	e0 2d       	mov	r30, r0
 834:	19 95       	eicall
 836:	89 2b       	or	r24, r25
 838:	e1 f6       	brne	.-72     	; 0x7f2 <fputc+0x10>
 83a:	d8 01       	movw	r26, r16
 83c:	16 96       	adiw	r26, 0x06	; 6
 83e:	8d 91       	ld	r24, X+
 840:	9c 91       	ld	r25, X
 842:	17 97       	sbiw	r26, 0x07	; 7
 844:	01 96       	adiw	r24, 0x01	; 1
 846:	17 96       	adiw	r26, 0x07	; 7
 848:	9c 93       	st	X, r25
 84a:	8e 93       	st	-X, r24
 84c:	16 97       	sbiw	r26, 0x06	; 6
 84e:	ce 01       	movw	r24, r28
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	08 95       	ret

0000085a <__ultoa_invert>:
 85a:	fa 01       	movw	r30, r20
 85c:	aa 27       	eor	r26, r26
 85e:	28 30       	cpi	r18, 0x08	; 8
 860:	51 f1       	breq	.+84     	; 0x8b6 <__ultoa_invert+0x5c>
 862:	20 31       	cpi	r18, 0x10	; 16
 864:	81 f1       	breq	.+96     	; 0x8c6 <__ultoa_invert+0x6c>
 866:	e8 94       	clt
 868:	6f 93       	push	r22
 86a:	6e 7f       	andi	r22, 0xFE	; 254
 86c:	6e 5f       	subi	r22, 0xFE	; 254
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	af 4f       	sbci	r26, 0xFF	; 255
 876:	b1 e0       	ldi	r27, 0x01	; 1
 878:	3e d0       	rcall	.+124    	; 0x8f6 <__ultoa_invert+0x9c>
 87a:	b4 e0       	ldi	r27, 0x04	; 4
 87c:	3c d0       	rcall	.+120    	; 0x8f6 <__ultoa_invert+0x9c>
 87e:	67 0f       	add	r22, r23
 880:	78 1f       	adc	r23, r24
 882:	89 1f       	adc	r24, r25
 884:	9a 1f       	adc	r25, r26
 886:	a1 1d       	adc	r26, r1
 888:	68 0f       	add	r22, r24
 88a:	79 1f       	adc	r23, r25
 88c:	8a 1f       	adc	r24, r26
 88e:	91 1d       	adc	r25, r1
 890:	a1 1d       	adc	r26, r1
 892:	6a 0f       	add	r22, r26
 894:	71 1d       	adc	r23, r1
 896:	81 1d       	adc	r24, r1
 898:	91 1d       	adc	r25, r1
 89a:	a1 1d       	adc	r26, r1
 89c:	20 d0       	rcall	.+64     	; 0x8de <__ultoa_invert+0x84>
 89e:	09 f4       	brne	.+2      	; 0x8a2 <__ultoa_invert+0x48>
 8a0:	68 94       	set
 8a2:	3f 91       	pop	r19
 8a4:	2a e0       	ldi	r18, 0x0A	; 10
 8a6:	26 9f       	mul	r18, r22
 8a8:	11 24       	eor	r1, r1
 8aa:	30 19       	sub	r19, r0
 8ac:	30 5d       	subi	r19, 0xD0	; 208
 8ae:	31 93       	st	Z+, r19
 8b0:	de f6       	brtc	.-74     	; 0x868 <__ultoa_invert+0xe>
 8b2:	cf 01       	movw	r24, r30
 8b4:	08 95       	ret
 8b6:	46 2f       	mov	r20, r22
 8b8:	47 70       	andi	r20, 0x07	; 7
 8ba:	40 5d       	subi	r20, 0xD0	; 208
 8bc:	41 93       	st	Z+, r20
 8be:	b3 e0       	ldi	r27, 0x03	; 3
 8c0:	0f d0       	rcall	.+30     	; 0x8e0 <__ultoa_invert+0x86>
 8c2:	c9 f7       	brne	.-14     	; 0x8b6 <__ultoa_invert+0x5c>
 8c4:	f6 cf       	rjmp	.-20     	; 0x8b2 <__ultoa_invert+0x58>
 8c6:	46 2f       	mov	r20, r22
 8c8:	4f 70       	andi	r20, 0x0F	; 15
 8ca:	40 5d       	subi	r20, 0xD0	; 208
 8cc:	4a 33       	cpi	r20, 0x3A	; 58
 8ce:	18 f0       	brcs	.+6      	; 0x8d6 <__ultoa_invert+0x7c>
 8d0:	49 5d       	subi	r20, 0xD9	; 217
 8d2:	31 fd       	sbrc	r19, 1
 8d4:	40 52       	subi	r20, 0x20	; 32
 8d6:	41 93       	st	Z+, r20
 8d8:	02 d0       	rcall	.+4      	; 0x8de <__ultoa_invert+0x84>
 8da:	a9 f7       	brne	.-22     	; 0x8c6 <__ultoa_invert+0x6c>
 8dc:	ea cf       	rjmp	.-44     	; 0x8b2 <__ultoa_invert+0x58>
 8de:	b4 e0       	ldi	r27, 0x04	; 4
 8e0:	a6 95       	lsr	r26
 8e2:	97 95       	ror	r25
 8e4:	87 95       	ror	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	ba 95       	dec	r27
 8ec:	c9 f7       	brne	.-14     	; 0x8e0 <__ultoa_invert+0x86>
 8ee:	00 97       	sbiw	r24, 0x00	; 0
 8f0:	61 05       	cpc	r22, r1
 8f2:	71 05       	cpc	r23, r1
 8f4:	08 95       	ret
 8f6:	9b 01       	movw	r18, r22
 8f8:	ac 01       	movw	r20, r24
 8fa:	0a 2e       	mov	r0, r26
 8fc:	06 94       	lsr	r0
 8fe:	57 95       	ror	r21
 900:	47 95       	ror	r20
 902:	37 95       	ror	r19
 904:	27 95       	ror	r18
 906:	ba 95       	dec	r27
 908:	c9 f7       	brne	.-14     	; 0x8fc <__ultoa_invert+0xa2>
 90a:	62 0f       	add	r22, r18
 90c:	73 1f       	adc	r23, r19
 90e:	84 1f       	adc	r24, r20
 910:	95 1f       	adc	r25, r21
 912:	a0 1d       	adc	r26, r0
 914:	08 95       	ret

00000916 <_exit>:
 916:	f8 94       	cli

00000918 <__stop_program>:
 918:	ff cf       	rjmp	.-2      	; 0x918 <__stop_program>
