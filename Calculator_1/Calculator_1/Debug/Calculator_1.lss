
Calculator_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  000003d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbb  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8c  00000000  00000000  00001453  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060c  00000000  00000000  000020df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  000026ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b0  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000600  00000000  00000000  00002e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00003444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	d8 c0       	rjmp	.+432    	; 0x1be <__vector_3>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	08 c1       	rjmp	.+528    	; 0x22a <__vector_6>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	34 c1       	rjmp	.+616    	; 0x296 <__vector_11>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 30       	cpi	r26, 0x04	; 4
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e d1       	rcall	.+540    	; 0x322 <main>
 106:	28 c1       	rjmp	.+592    	; 0x358 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <num_1>:
	}
}

void num_1(void) {
	
	if(n1 == 0x0F) {
 10a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <n1>
 10e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <n1+0x1>
 112:	0f 97       	sbiw	r24, 0x0f	; 15
 114:	41 f4       	brne	.+16     	; 0x126 <num_1+0x1c>
		n1=0; 
 116:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <n1+0x1>
 11a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <n1>
		PORTC |= 0x0F;
 11e:	88 b1       	in	r24, 0x08	; 8
 120:	8f 60       	ori	r24, 0x0F	; 15
 122:	88 b9       	out	0x08, r24	; 8
		return 0;
 124:	08 95       	ret
	}
	
	n1++;
 126:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <n1>
 12a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <n1+0x1>
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <n1+0x1>
 134:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <n1>
	
	unsigned int t = 0xFF & n1;
 138:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <n1>
 13c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <n1+0x1>
	
	PORTC |= 0x0F;
 140:	98 b1       	in	r25, 0x08	; 8
 142:	9f 60       	ori	r25, 0x0F	; 15
 144:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~t;
 146:	98 b1       	in	r25, 0x08	; 8
 148:	80 95       	com	r24
 14a:	89 23       	and	r24, r25
 14c:	88 b9       	out	0x08, r24	; 8
 14e:	08 95       	ret

00000150 <num_2>:
}

void num_2(void) {
	
	if(n2 == 0x0F){ 
 150:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 154:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 158:	0f 97       	sbiw	r24, 0x0f	; 15
 15a:	41 f4       	brne	.+16     	; 0x16c <num_2+0x1c>
		n2=0;
 15c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 160:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
		PORTC |= 0xF0;
 164:	88 b1       	in	r24, 0x08	; 8
 166:	80 6f       	ori	r24, 0xF0	; 240
 168:	88 b9       	out	0x08, r24	; 8
		return;
 16a:	08 95       	ret
	}
	
	n2++;
 16c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 170:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 17a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	unsigned int t = 0xFF & n2;
 17e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 182:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
	
	PORTC |= 0xF0;
 186:	98 b1       	in	r25, 0x08	; 8
 188:	90 6f       	ori	r25, 0xF0	; 240
 18a:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~(t<<4);
 18c:	98 b1       	in	r25, 0x08	; 8
 18e:	82 95       	swap	r24
 190:	80 7f       	andi	r24, 0xF0	; 240
 192:	80 95       	com	r24
 194:	89 23       	and	r24, r25
 196:	88 b9       	out	0x08, r24	; 8
 198:	08 95       	ret

0000019a <sum>:
}

void sum(void) {
	
	unsigned int t = 0xFF & (n1 + n2);
 19a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <n1>
 19e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <n1+0x1>
 1a2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1a6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	82 0f       	add	r24, r18
 1ac:	93 1f       	adc	r25, r19
	
	PORTC |= 0xFF;
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9f ef       	ldi	r25, 0xFF	; 255
 1b2:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~t;
 1b4:	98 b1       	in	r25, 0x08	; 8
 1b6:	80 95       	com	r24
 1b8:	89 23       	and	r24, r25
 1ba:	88 b9       	out	0x08, r24	; 8
 1bc:	08 95       	ret

000001be <__vector_3>:
}


ISR(INT2_vect){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	0b b6       	in	r0, 0x3b	; 59
 1ca:	0f 92       	push	r0
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1e4:	80 ed       	ldi	r24, 0xD0	; 208
 1e6:	97 e0       	ldi	r25, 0x07	; 7
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <__vector_3+0x36>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ea:	e0 e9       	ldi	r30, 0x90	; 144
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <__vector_3+0x30>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	c9 f7       	brne	.-14     	; 0x1ea <__vector_3+0x2c>
	_delay_ms(200);
	cli();
 1f8:	f8 94       	cli
	EIFR|=0x04;
 1fa:	8c b3       	in	r24, 0x1c	; 28
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	8c bb       	out	0x1c, r24	; 28
	sei();
 200:	78 94       	sei
	num_1();
 202:	83 df       	rcall	.-250    	; 0x10a <num_1>
	//reti();
}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0b be       	out	0x3b, r0	; 59
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_6>:

ISR(INT5_vect){
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	0b b6       	in	r0, 0x3b	; 59
 236:	0f 92       	push	r0
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 250:	80 ed       	ldi	r24, 0xD0	; 208
 252:	97 e0       	ldi	r25, 0x07	; 7
 254:	05 c0       	rjmp	.+10     	; 0x260 <__vector_6+0x36>
 256:	e0 e9       	ldi	r30, 0x90	; 144
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <__vector_6+0x30>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 260:	00 97       	sbiw	r24, 0x00	; 0
 262:	c9 f7       	brne	.-14     	; 0x256 <__vector_6+0x2c>
	_delay_ms(200);
	cli();
 264:	f8 94       	cli
	EIFR |= 0x20;
 266:	8c b3       	in	r24, 0x1c	; 28
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	8c bb       	out	0x1c, r24	; 28
	sei();
 26c:	78 94       	sei
	num_2();
 26e:	70 df       	rcall	.-288    	; 0x150 <num_2>
	//reti();
}
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	bf 91       	pop	r27
 276:	af 91       	pop	r26
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	7f 91       	pop	r23
 27e:	6f 91       	pop	r22
 280:	5f 91       	pop	r21
 282:	4f 91       	pop	r20
 284:	3f 91       	pop	r19
 286:	2f 91       	pop	r18
 288:	0f 90       	pop	r0
 28a:	0b be       	out	0x3b, r0	; 59
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__vector_11>:

ISR(PCINT2_vect){
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	0b b6       	in	r0, 0x3b	; 59
 2a2:	0f 92       	push	r0
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2bc:	80 ed       	ldi	r24, 0xD0	; 208
 2be:	97 e0       	ldi	r25, 0x07	; 7
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <__vector_11+0x36>
 2c2:	e0 e9       	ldi	r30, 0x90	; 144
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <__vector_11+0x30>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	c9 f7       	brne	.-14     	; 0x2c2 <__vector_11+0x2c>
	_delay_ms(200);
	cli();
 2d0:	f8 94       	cli
	unsigned int in = PINK & (0x04);
 2d2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
	PCIFR |= 0x04;
 2d6:	8b b3       	in	r24, 0x1b	; 27
 2d8:	84 60       	ori	r24, 0x04	; 4
 2da:	8b bb       	out	0x1b, r24	; 27
	sei();
 2dc:	78 94       	sei
	if(!in) {
 2de:	92 fd       	sbrc	r25, 2
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__vector_11+0x50>
		sum();
 2e2:	5b df       	rcall	.-330    	; 0x19a <sum>
 2e4:	0b c0       	rjmp	.+22     	; 0x2fc <__vector_11+0x66>
	}
	else {
		n1=0;
 2e6:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <n1+0x1>
 2ea:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <n1>
		n2=0;
 2ee:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2f2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
		PORTC = 0xFF;
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	88 b9       	out	0x08, r24	; 8
		reti();
 2fa:	18 95       	reti
	}
	// reti();
}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0b be       	out	0x3b, r0	; 59
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <main>:

int main(void)
{
	cli();
 322:	f8 94       	cli
	
	EICRA = 0x20;
 324:	80 e2       	ldi	r24, 0x20	; 32
 326:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	EICRB = 0x08;
 32a:	88 e0       	ldi	r24, 0x08	; 8
 32c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
	EIMSK = 0x24;
 330:	84 e2       	ldi	r24, 0x24	; 36
 332:	8d bb       	out	0x1d, r24	; 29
	EIFR =  0x24;
 334:	8c bb       	out	0x1c, r24	; 28
	
	PCICR = 0x04;
 336:	84 e0       	ldi	r24, 0x04	; 4
 338:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
	PCIFR = 0x04;
 33c:	8b bb       	out	0x1b, r24	; 27
	PCMSK2 = 0x04;
 33e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7c006d>
	
	PORTC = 0xFF;
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	88 b9       	out	0x08, r24	; 8
	DDRC = 0xFF;
 346:	87 b9       	out	0x07, r24	; 7
	
	DDRD = ~(0x04);
 348:	8b ef       	ldi	r24, 0xFB	; 251
 34a:	8a b9       	out	0x0a, r24	; 10
	DDRE = ~(0x20);
 34c:	9f ed       	ldi	r25, 0xDF	; 223
 34e:	9d b9       	out	0x0d, r25	; 13
	
	DDRK = ~(0x04);
 350:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	
	sei();
 354:	78 94       	sei
 356:	ff cf       	rjmp	.-2      	; 0x356 <main+0x34>

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
