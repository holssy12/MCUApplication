
1122.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  00000b9a  00000c2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  0080021e  0080021e  00000c4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014cf  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2f  00000000  00000000  000021e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091e  00000000  00000000  00002f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f4  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd7  00000000  00000000  00003fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00004bbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3d c3       	rjmp	.+1658   	; 0x70c <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e9       	ldi	r30, 0x9A	; 154
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 31       	cpi	r26, 0x1E	; 30
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e1       	ldi	r26, 0x1E	; 30
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 38       	cpi	r26, 0x86	; 134
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	8f d3       	rcall	.+1822   	; 0x83e <main>
 120:	3a c5       	rjmp	.+2676   	; 0xb96 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <led_all_onoff>:
unsigned char buf[BUF_SZ];
unsigned int com_size = 0;

unsigned int sint_flag = 0;

void led_all_onoff(int _s) {
 124:	8f 92       	push	r8
 126:	9f 92       	push	r9
 128:	af 92       	push	r10
 12a:	bf 92       	push	r11
 12c:	cf 92       	push	r12
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	8c 01       	movw	r16, r24
	
	// LED_ALL_ON_OFF
	for (int i=0; i<3; i++) {
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	6d c0       	rjmp	.+218    	; 0x21e <led_all_onoff+0xfa>
		PORTC = 0x00;
 144:	18 b8       	out	0x08, r1	; 8
		_delay_ms(_s);
 146:	b8 01       	movw	r22, r16
 148:	01 2e       	mov	r0, r17
 14a:	00 0c       	add	r0, r0
 14c:	88 0b       	sbc	r24, r24
 14e:	99 0b       	sbc	r25, r25
 150:	e8 d3       	rcall	.+2000   	; 0x922 <__floatsisf>
 152:	4b 01       	movw	r8, r22
 154:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	4a e7       	ldi	r20, 0x7A	; 122
 15c:	55 e4       	ldi	r21, 0x45	; 69
 15e:	6d d4       	rcall	.+2266   	; 0xa3a <__mulsf3>
 160:	6b 01       	movw	r12, r22
 162:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e8       	ldi	r20, 0x80	; 128
 16a:	5f e3       	ldi	r21, 0x3F	; 63
 16c:	a8 d3       	rcall	.+1872   	; 0x8be <__cmpsf2>
 16e:	88 23       	and	r24, r24
 170:	04 f1       	brlt	.+64     	; 0x1b2 <led_all_onoff+0x8e>
		__ticks = 1;
	else if (__tmp > 65535)
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	3f ef       	ldi	r19, 0xFF	; 255
 176:	4f e7       	ldi	r20, 0x7F	; 127
 178:	57 e4       	ldi	r21, 0x47	; 71
 17a:	c7 01       	movw	r24, r14
 17c:	b6 01       	movw	r22, r12
 17e:	59 d4       	rcall	.+2226   	; 0xa32 <__gesf2>
 180:	18 16       	cp	r1, r24
 182:	9c f4       	brge	.+38     	; 0x1aa <led_all_onoff+0x86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e2       	ldi	r20, 0x20	; 32
 18a:	51 e4       	ldi	r21, 0x41	; 65
 18c:	c5 01       	movw	r24, r10
 18e:	b4 01       	movw	r22, r8
 190:	54 d4       	rcall	.+2216   	; 0xa3a <__mulsf3>
 192:	99 d3       	rcall	.+1842   	; 0x8c6 <__fixunssfsi>
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <led_all_onoff+0x7e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 196:	80 e9       	ldi	r24, 0x90	; 144
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <led_all_onoff+0x76>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19e:	61 50       	subi	r22, 0x01	; 1
 1a0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a2:	61 15       	cp	r22, r1
 1a4:	71 05       	cpc	r23, r1
 1a6:	b9 f7       	brne	.-18     	; 0x196 <led_all_onoff+0x72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1a8:	09 c0       	rjmp	.+18     	; 0x1bc <led_all_onoff+0x98>
 1aa:	c7 01       	movw	r24, r14
 1ac:	b6 01       	movw	r22, r12
 1ae:	8b d3       	rcall	.+1814   	; 0x8c6 <__fixunssfsi>
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <led_all_onoff+0x92>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	cb 01       	movw	r24, r22
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <led_all_onoff+0x94>
		PORTC = 0xFF;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 1be:	88 b9       	out	0x08, r24	; 8
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e8       	ldi	r20, 0x80	; 128
 1c6:	5f e3       	ldi	r21, 0x3F	; 63
 1c8:	c7 01       	movw	r24, r14
 1ca:	b6 01       	movw	r22, r12
 1cc:	78 d3       	rcall	.+1776   	; 0x8be <__cmpsf2>
 1ce:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 1d0:	04 f1       	brlt	.+64     	; 0x212 <led_all_onoff+0xee>
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	3f ef       	ldi	r19, 0xFF	; 255
 1d6:	4f e7       	ldi	r20, 0x7F	; 127
 1d8:	57 e4       	ldi	r21, 0x47	; 71
 1da:	c7 01       	movw	r24, r14
 1dc:	b6 01       	movw	r22, r12
 1de:	29 d4       	rcall	.+2130   	; 0xa32 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1e0:	18 16       	cp	r1, r24
 1e2:	9c f4       	brge	.+38     	; 0x20a <led_all_onoff+0xe6>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	40 e2       	ldi	r20, 0x20	; 32
 1ea:	51 e4       	ldi	r21, 0x41	; 65
 1ec:	c5 01       	movw	r24, r10
 1ee:	b4 01       	movw	r22, r8
 1f0:	24 d4       	rcall	.+2120   	; 0xa3a <__mulsf3>
 1f2:	69 d3       	rcall	.+1746   	; 0x8c6 <__fixunssfsi>
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <led_all_onoff+0xde>
 1f6:	80 e9       	ldi	r24, 0x90	; 144
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <led_all_onoff+0xd6>
 1fe:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 200:	71 09       	sbc	r23, r1
 202:	61 15       	cp	r22, r1
 204:	71 05       	cpc	r23, r1
 206:	b9 f7       	brne	.-18     	; 0x1f6 <led_all_onoff+0xd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 208:	09 c0       	rjmp	.+18     	; 0x21c <led_all_onoff+0xf8>
 20a:	c7 01       	movw	r24, r14
 20c:	b6 01       	movw	r22, r12
 20e:	5b d3       	rcall	.+1718   	; 0x8c6 <__fixunssfsi>
 210:	02 c0       	rjmp	.+4      	; 0x216 <led_all_onoff+0xf2>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	cb 01       	movw	r24, r22
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <led_all_onoff+0xf4>
unsigned int sint_flag = 0;

void led_all_onoff(int _s) {
	
	// LED_ALL_ON_OFF
	for (int i=0; i<3; i++) {
 21c:	21 96       	adiw	r28, 0x01	; 1
 21e:	c3 30       	cpi	r28, 0x03	; 3
 220:	d1 05       	cpc	r29, r1
 222:	0c f4       	brge	.+2      	; 0x226 <led_all_onoff+0x102>
 224:	8f cf       	rjmp	.-226    	; 0x144 <led_all_onoff+0x20>
		PORTC = 0x00;
		_delay_ms(_s);
		PORTC = 0xFF;
		_delay_ms(_s);
	}
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	df 90       	pop	r13
 234:	cf 90       	pop	r12
 236:	bf 90       	pop	r11
 238:	af 90       	pop	r10
 23a:	9f 90       	pop	r9
 23c:	8f 90       	pop	r8
 23e:	08 95       	ret

00000240 <led_alternating>:

void led_alternating(int _s) {
 240:	8f 92       	push	r8
 242:	9f 92       	push	r9
 244:	af 92       	push	r10
 246:	bf 92       	push	r11
 248:	cf 92       	push	r12
 24a:	df 92       	push	r13
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	8c 01       	movw	r16, r24
	// LED_ALTERNATING
	for (int i = 0; i < 3; i++) {
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	6e c0       	rjmp	.+220    	; 0x33c <led_alternating+0xfc>
		PORTC = 0xAA;
 260:	8a ea       	ldi	r24, 0xAA	; 170
 262:	88 b9       	out	0x08, r24	; 8
		_delay_ms(_s);
 264:	b8 01       	movw	r22, r16
 266:	01 2e       	mov	r0, r17
 268:	00 0c       	add	r0, r0
 26a:	88 0b       	sbc	r24, r24
 26c:	99 0b       	sbc	r25, r25
 26e:	59 d3       	rcall	.+1714   	; 0x922 <__floatsisf>
 270:	4b 01       	movw	r8, r22
 272:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	4a e7       	ldi	r20, 0x7A	; 122
 27a:	55 e4       	ldi	r21, 0x45	; 69
 27c:	de d3       	rcall	.+1980   	; 0xa3a <__mulsf3>
 27e:	6b 01       	movw	r12, r22
 280:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e8       	ldi	r20, 0x80	; 128
 288:	5f e3       	ldi	r21, 0x3F	; 63
 28a:	19 d3       	rcall	.+1586   	; 0x8be <__cmpsf2>
 28c:	88 23       	and	r24, r24
 28e:	04 f1       	brlt	.+64     	; 0x2d0 <led_alternating+0x90>
		__ticks = 1;
	else if (__tmp > 65535)
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	3f ef       	ldi	r19, 0xFF	; 255
 294:	4f e7       	ldi	r20, 0x7F	; 127
 296:	57 e4       	ldi	r21, 0x47	; 71
 298:	c7 01       	movw	r24, r14
 29a:	b6 01       	movw	r22, r12
 29c:	ca d3       	rcall	.+1940   	; 0xa32 <__gesf2>
 29e:	18 16       	cp	r1, r24
 2a0:	9c f4       	brge	.+38     	; 0x2c8 <led_alternating+0x88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	40 e2       	ldi	r20, 0x20	; 32
 2a8:	51 e4       	ldi	r21, 0x41	; 65
 2aa:	c5 01       	movw	r24, r10
 2ac:	b4 01       	movw	r22, r8
 2ae:	c5 d3       	rcall	.+1930   	; 0xa3a <__mulsf3>
 2b0:	0a d3       	rcall	.+1556   	; 0x8c6 <__fixunssfsi>
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <led_alternating+0x80>
 2b4:	80 e9       	ldi	r24, 0x90	; 144
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <led_alternating+0x78>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2bc:	61 50       	subi	r22, 0x01	; 1
 2be:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c0:	61 15       	cp	r22, r1
 2c2:	71 05       	cpc	r23, r1
 2c4:	b9 f7       	brne	.-18     	; 0x2b4 <led_alternating+0x74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <led_alternating+0x9a>
 2c8:	c7 01       	movw	r24, r14
 2ca:	b6 01       	movw	r22, r12
 2cc:	fc d2       	rcall	.+1528   	; 0x8c6 <__fixunssfsi>
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <led_alternating+0x94>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	cb 01       	movw	r24, r22
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <led_alternating+0x96>
		PORTC = 0x55;
 2da:	85 e5       	ldi	r24, 0x55	; 85
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 2dc:	88 b9       	out	0x08, r24	; 8
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e8       	ldi	r20, 0x80	; 128
 2e4:	5f e3       	ldi	r21, 0x3F	; 63
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	e9 d2       	rcall	.+1490   	; 0x8be <__cmpsf2>
 2ec:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 2ee:	04 f1       	brlt	.+64     	; 0x330 <led_alternating+0xf0>
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	3f ef       	ldi	r19, 0xFF	; 255
 2f4:	4f e7       	ldi	r20, 0x7F	; 127
 2f6:	57 e4       	ldi	r21, 0x47	; 71
 2f8:	c7 01       	movw	r24, r14
 2fa:	b6 01       	movw	r22, r12
 2fc:	9a d3       	rcall	.+1844   	; 0xa32 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2fe:	18 16       	cp	r1, r24
 300:	9c f4       	brge	.+38     	; 0x328 <led_alternating+0xe8>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	40 e2       	ldi	r20, 0x20	; 32
 308:	51 e4       	ldi	r21, 0x41	; 65
 30a:	c5 01       	movw	r24, r10
 30c:	b4 01       	movw	r22, r8
 30e:	95 d3       	rcall	.+1834   	; 0xa3a <__mulsf3>
 310:	da d2       	rcall	.+1460   	; 0x8c6 <__fixunssfsi>
 312:	06 c0       	rjmp	.+12     	; 0x320 <led_alternating+0xe0>
 314:	80 e9       	ldi	r24, 0x90	; 144
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 31a:	f1 f7       	brne	.-4      	; 0x318 <led_alternating+0xd8>
 31c:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 31e:	71 09       	sbc	r23, r1
 320:	61 15       	cp	r22, r1
 322:	71 05       	cpc	r23, r1
 324:	b9 f7       	brne	.-18     	; 0x314 <led_alternating+0xd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 326:	09 c0       	rjmp	.+18     	; 0x33a <led_alternating+0xfa>
 328:	c7 01       	movw	r24, r14
 32a:	b6 01       	movw	r22, r12
 32c:	cc d2       	rcall	.+1432   	; 0x8c6 <__fixunssfsi>
 32e:	02 c0       	rjmp	.+4      	; 0x334 <led_alternating+0xf4>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	cb 01       	movw	r24, r22
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <led_alternating+0xf6>
	}
}

void led_alternating(int _s) {
	// LED_ALTERNATING
	for (int i = 0; i < 3; i++) {
 33a:	21 96       	adiw	r28, 0x01	; 1
 33c:	c3 30       	cpi	r28, 0x03	; 3
 33e:	d1 05       	cpc	r29, r1
 340:	0c f4       	brge	.+2      	; 0x344 <led_alternating+0x104>
 342:	8e cf       	rjmp	.-228    	; 0x260 <led_alternating+0x20>
 344:	c0 e0       	ldi	r28, 0x00	; 0
 346:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(_s);
		PORTC = 0x55;
		_delay_ms(_s);
	}
	for (int i = 0; i < 3; i++) {
		PORTC = 0xF0;
 348:	6e c0       	rjmp	.+220    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 34a:	80 ef       	ldi	r24, 0xF0	; 240
		_delay_ms(_s);
 34c:	88 b9       	out	0x08, r24	; 8
 34e:	b8 01       	movw	r22, r16
 350:	01 2e       	mov	r0, r17
 352:	00 0c       	add	r0, r0
 354:	88 0b       	sbc	r24, r24
 356:	99 0b       	sbc	r25, r25
 358:	e4 d2       	rcall	.+1480   	; 0x922 <__floatsisf>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 35a:	4b 01       	movw	r8, r22
 35c:	5c 01       	movw	r10, r24
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	4a e7       	ldi	r20, 0x7A	; 122
 364:	55 e4       	ldi	r21, 0x45	; 69
 366:	69 d3       	rcall	.+1746   	; 0xa3a <__mulsf3>
	if (__tmp < 1.0)
 368:	6b 01       	movw	r12, r22
 36a:	7c 01       	movw	r14, r24
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	40 e8       	ldi	r20, 0x80	; 128
 372:	5f e3       	ldi	r21, 0x3F	; 63
 374:	a4 d2       	rcall	.+1352   	; 0x8be <__cmpsf2>
 376:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 378:	04 f1       	brlt	.+64     	; 0x3ba <led_alternating+0x17a>
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	3f ef       	ldi	r19, 0xFF	; 255
 37e:	4f e7       	ldi	r20, 0x7F	; 127
 380:	57 e4       	ldi	r21, 0x47	; 71
 382:	c7 01       	movw	r24, r14
 384:	b6 01       	movw	r22, r12
 386:	55 d3       	rcall	.+1706   	; 0xa32 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 388:	18 16       	cp	r1, r24
 38a:	9c f4       	brge	.+38     	; 0x3b2 <led_alternating+0x172>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	40 e2       	ldi	r20, 0x20	; 32
 392:	51 e4       	ldi	r21, 0x41	; 65
 394:	c5 01       	movw	r24, r10
 396:	b4 01       	movw	r22, r8
 398:	50 d3       	rcall	.+1696   	; 0xa3a <__mulsf3>
 39a:	95 d2       	rcall	.+1322   	; 0x8c6 <__fixunssfsi>
 39c:	06 c0       	rjmp	.+12     	; 0x3aa <led_alternating+0x16a>
 39e:	80 e9       	ldi	r24, 0x90	; 144
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <led_alternating+0x162>
 3a6:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a8:	71 09       	sbc	r23, r1
 3aa:	61 15       	cp	r22, r1
 3ac:	71 05       	cpc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3ae:	b9 f7       	brne	.-18     	; 0x39e <led_alternating+0x15e>
 3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <led_alternating+0x184>
 3b2:	c7 01       	movw	r24, r14
 3b4:	b6 01       	movw	r22, r12
 3b6:	87 d2       	rcall	.+1294   	; 0x8c6 <__fixunssfsi>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <led_alternating+0x17e>
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	cb 01       	movw	r24, r22
		PORTC = 0x0F;
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <led_alternating+0x180>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 3c4:	8f e0       	ldi	r24, 0x0F	; 15
 3c6:	88 b9       	out	0x08, r24	; 8
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	40 e8       	ldi	r20, 0x80	; 128
 3ce:	5f e3       	ldi	r21, 0x3F	; 63
 3d0:	c7 01       	movw	r24, r14
 3d2:	b6 01       	movw	r22, r12
		__ticks = 1;
	else if (__tmp > 65535)
 3d4:	74 d2       	rcall	.+1256   	; 0x8be <__cmpsf2>
 3d6:	88 23       	and	r24, r24
 3d8:	04 f1       	brlt	.+64     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	3f ef       	ldi	r19, 0xFF	; 255
 3de:	4f e7       	ldi	r20, 0x7F	; 127
 3e0:	57 e4       	ldi	r21, 0x47	; 71
 3e2:	c7 01       	movw	r24, r14
 3e4:	b6 01       	movw	r22, r12
 3e6:	25 d3       	rcall	.+1610   	; 0xa32 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3e8:	18 16       	cp	r1, r24
 3ea:	9c f4       	brge	.+38     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e2       	ldi	r20, 0x20	; 32
 3f2:	51 e4       	ldi	r21, 0x41	; 65
 3f4:	c5 01       	movw	r24, r10
 3f6:	b4 01       	movw	r22, r8
 3f8:	20 d3       	rcall	.+1600   	; 0xa3a <__mulsf3>
 3fa:	65 d2       	rcall	.+1226   	; 0x8c6 <__fixunssfsi>
 3fc:	06 c0       	rjmp	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fe:	80 e9       	ldi	r24, 0x90	; 144
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 408:	71 09       	sbc	r23, r1
 40a:	61 15       	cp	r22, r1
 40c:	71 05       	cpc	r23, r1
 40e:	b9 f7       	brne	.-18     	; 0x3fe <led_alternating+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 410:	09 c0       	rjmp	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 412:	c7 01       	movw	r24, r14
 414:	b6 01       	movw	r22, r12
 416:	57 d2       	rcall	.+1198   	; 0x8c6 <__fixunssfsi>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	cb 01       	movw	r24, r22
		PORTC = 0xAA;
		_delay_ms(_s);
		PORTC = 0x55;
		_delay_ms(_s);
	}
	for (int i = 0; i < 3; i++) {
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	21 96       	adiw	r28, 0x01	; 1
 426:	c3 30       	cpi	r28, 0x03	; 3
 428:	d1 05       	cpc	r29, r1
 42a:	0c f4       	brge	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	8e cf       	rjmp	.-228    	; 0x34a <led_alternating+0x10a>
		_delay_ms(_s);
		PORTC = 0x0F;
		_delay_ms(_s);
	}
	for (int i = 0; i < 3; i++) {
		PORTC = 0xC3;
 42e:	c0 e0       	ldi	r28, 0x00	; 0
 430:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(_s);
 432:	6e c0       	rjmp	.+220    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 434:	83 ec       	ldi	r24, 0xC3	; 195
 436:	88 b9       	out	0x08, r24	; 8
 438:	b8 01       	movw	r22, r16
 43a:	01 2e       	mov	r0, r17
 43c:	00 0c       	add	r0, r0
 43e:	88 0b       	sbc	r24, r24
 440:	99 0b       	sbc	r25, r25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 442:	6f d2       	rcall	.+1246   	; 0x922 <__floatsisf>
 444:	4b 01       	movw	r8, r22
 446:	5c 01       	movw	r10, r24
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	4a e7       	ldi	r20, 0x7A	; 122
	if (__tmp < 1.0)
 44e:	55 e4       	ldi	r21, 0x45	; 69
 450:	f4 d2       	rcall	.+1512   	; 0xa3a <__mulsf3>
 452:	6b 01       	movw	r12, r22
 454:	7c 01       	movw	r14, r24
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e8       	ldi	r20, 0x80	; 128
 45c:	5f e3       	ldi	r21, 0x3F	; 63
		__ticks = 1;
	else if (__tmp > 65535)
 45e:	2f d2       	rcall	.+1118   	; 0x8be <__cmpsf2>
 460:	88 23       	and	r24, r24
 462:	04 f1       	brlt	.+64     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	3f ef       	ldi	r19, 0xFF	; 255
 468:	4f e7       	ldi	r20, 0x7F	; 127
 46a:	57 e4       	ldi	r21, 0x47	; 71
 46c:	c7 01       	movw	r24, r14
 46e:	b6 01       	movw	r22, r12
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 470:	e0 d2       	rcall	.+1472   	; 0xa32 <__gesf2>
 472:	18 16       	cp	r1, r24
 474:	9c f4       	brge	.+38     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	40 e2       	ldi	r20, 0x20	; 32
 47c:	51 e4       	ldi	r21, 0x41	; 65
 47e:	c5 01       	movw	r24, r10
 480:	b4 01       	movw	r22, r8
 482:	db d2       	rcall	.+1462   	; 0xa3a <__mulsf3>
 484:	20 d2       	rcall	.+1088   	; 0x8c6 <__fixunssfsi>
 486:	06 c0       	rjmp	.+12     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 488:	80 e9       	ldi	r24, 0x90	; 144
 48a:	91 e0       	ldi	r25, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 490:	61 50       	subi	r22, 0x01	; 1
 492:	71 09       	sbc	r23, r1
 494:	61 15       	cp	r22, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 496:	71 05       	cpc	r23, r1
 498:	b9 f7       	brne	.-18     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 49a:	09 c0       	rjmp	.+18     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 49c:	c7 01       	movw	r24, r14
 49e:	b6 01       	movw	r22, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 4a0:	12 d2       	rcall	.+1060   	; 0x8c6 <__fixunssfsi>
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	70 e0       	ldi	r23, 0x00	; 0
		PORTC = 0x3C;
 4a8:	cb 01       	movw	r24, r22
 4aa:	01 97       	sbiw	r24, 0x01	; 1
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4ae:	8c e3       	ldi	r24, 0x3C	; 60
 4b0:	88 b9       	out	0x08, r24	; 8
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	40 e8       	ldi	r20, 0x80	; 128
 4b8:	5f e3       	ldi	r21, 0x3F	; 63
 4ba:	c7 01       	movw	r24, r14
 4bc:	b6 01       	movw	r22, r12
		__ticks = 1;
	else if (__tmp > 65535)
 4be:	ff d1       	rcall	.+1022   	; 0x8be <__cmpsf2>
 4c0:	88 23       	and	r24, r24
 4c2:	04 f1       	brlt	.+64     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	3f ef       	ldi	r19, 0xFF	; 255
 4c8:	4f e7       	ldi	r20, 0x7F	; 127
 4ca:	57 e4       	ldi	r21, 0x47	; 71
 4cc:	c7 01       	movw	r24, r14
 4ce:	b6 01       	movw	r22, r12
 4d0:	b0 d2       	rcall	.+1376   	; 0xa32 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4d2:	18 16       	cp	r1, r24
 4d4:	9c f4       	brge	.+38     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	40 e2       	ldi	r20, 0x20	; 32
 4dc:	51 e4       	ldi	r21, 0x41	; 65
 4de:	c5 01       	movw	r24, r10
 4e0:	b4 01       	movw	r22, r8
 4e2:	ab d2       	rcall	.+1366   	; 0xa3a <__mulsf3>
 4e4:	f0 d1       	rcall	.+992    	; 0x8c6 <__fixunssfsi>
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4e8:	80 e9       	ldi	r24, 0x90	; 144
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4f0:	61 50       	subi	r22, 0x01	; 1
 4f2:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4f4:	61 15       	cp	r22, r1
 4f6:	71 05       	cpc	r23, r1
 4f8:	b9 f7       	brne	.-18     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4fc:	c7 01       	movw	r24, r14
 4fe:	b6 01       	movw	r22, r12
 500:	e2 d1       	rcall	.+964    	; 0x8c6 <__fixunssfsi>
 502:	02 c0       	rjmp	.+4      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 504:	61 e0       	ldi	r22, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	cb 01       	movw	r24, r22
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 50e:	21 96       	adiw	r28, 0x01	; 1
		PORTC = 0xF0;
		_delay_ms(_s);
		PORTC = 0x0F;
		_delay_ms(_s);
	}
	for (int i = 0; i < 3; i++) {
 510:	c3 30       	cpi	r28, 0x03	; 3
 512:	d1 05       	cpc	r29, r1
 514:	0c f4       	brge	.+2      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 516:	8e cf       	rjmp	.-228    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 518:	df 91       	pop	r29
		PORTC = 0xC3;
		_delay_ms(_s);
		PORTC = 0x3C;
		_delay_ms(_s);
	}
}
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	df 90       	pop	r13
 526:	cf 90       	pop	r12
 528:	bf 90       	pop	r11
 52a:	af 90       	pop	r10
 52c:	9f 90       	pop	r9
 52e:	8f 90       	pop	r8
 530:	08 95       	ret

00000532 <led_shift>:
 532:	4f 92       	push	r4

void led_shift(int _s) {
 534:	5f 92       	push	r5
 536:	6f 92       	push	r6
 538:	7f 92       	push	r7
 53a:	8f 92       	push	r8
 53c:	9f 92       	push	r9
 53e:	af 92       	push	r10
 540:	bf 92       	push	r11
 542:	ef 92       	push	r14
 544:	ff 92       	push	r15
 546:	0f 93       	push	r16
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	8c 01       	movw	r16, r24
	
	// LED_SHIFT
	for (int j=0; j<3; j++) {
 550:	e1 2c       	mov	r14, r1
 552:	f1 2c       	mov	r15, r1
 554:	a5 c0       	rjmp	.+330    	; 0x6a0 <led_shift+0x16e>
		for(int i=0; i<8; i++) {
			PORTC = ~(0x01 << i);
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0c 2e       	mov	r0, r28
 55c:	02 c0       	rjmp	.+4      	; 0x562 <led_shift+0x30>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <led_shift+0x2c>
 566:	80 95       	com	r24
 568:	88 b9       	out	0x08, r24	; 8
			if (i != 7) {
 56a:	c7 30       	cpi	r28, 0x07	; 7
 56c:	d1 05       	cpc	r29, r1
 56e:	09 f4       	brne	.+2      	; 0x572 <led_shift+0x40>
 570:	3b c0       	rjmp	.+118    	; 0x5e8 <led_shift+0xb6>
				_delay_ms(_s);
 572:	b8 01       	movw	r22, r16
 574:	01 2e       	mov	r0, r17
 576:	00 0c       	add	r0, r0
 578:	88 0b       	sbc	r24, r24
 57a:	99 0b       	sbc	r25, r25
 57c:	d2 d1       	rcall	.+932    	; 0x922 <__floatsisf>
 57e:	2b 01       	movw	r4, r22
 580:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	4a e7       	ldi	r20, 0x7A	; 122
 588:	55 e4       	ldi	r21, 0x45	; 69
 58a:	57 d2       	rcall	.+1198   	; 0xa3a <__mulsf3>
 58c:	4b 01       	movw	r8, r22
 58e:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
 590:	20 e0       	ldi	r18, 0x00	; 0
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	40 e8       	ldi	r20, 0x80	; 128
 596:	5f e3       	ldi	r21, 0x3F	; 63
 598:	92 d1       	rcall	.+804    	; 0x8be <__cmpsf2>
 59a:	88 23       	and	r24, r24
 59c:	04 f1       	brlt	.+64     	; 0x5de <led_shift+0xac>
		__ticks = 1;
	else if (__tmp > 65535)
 59e:	20 e0       	ldi	r18, 0x00	; 0
 5a0:	3f ef       	ldi	r19, 0xFF	; 255
 5a2:	4f e7       	ldi	r20, 0x7F	; 127
 5a4:	57 e4       	ldi	r21, 0x47	; 71
 5a6:	c5 01       	movw	r24, r10
 5a8:	b4 01       	movw	r22, r8
 5aa:	43 d2       	rcall	.+1158   	; 0xa32 <__gesf2>
 5ac:	18 16       	cp	r1, r24
 5ae:	9c f4       	brge	.+38     	; 0x5d6 <led_shift+0xa4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	40 e2       	ldi	r20, 0x20	; 32
 5b6:	51 e4       	ldi	r21, 0x41	; 65
 5b8:	c3 01       	movw	r24, r6
 5ba:	b2 01       	movw	r22, r4
 5bc:	3e d2       	rcall	.+1148   	; 0xa3a <__mulsf3>
 5be:	83 d1       	rcall	.+774    	; 0x8c6 <__fixunssfsi>
 5c0:	06 c0       	rjmp	.+12     	; 0x5ce <led_shift+0x9c>
 5c2:	80 e9       	ldi	r24, 0x90	; 144
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <led_shift+0x94>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ca:	61 50       	subi	r22, 0x01	; 1
 5cc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5ce:	61 15       	cp	r22, r1
 5d0:	71 05       	cpc	r23, r1
 5d2:	b9 f7       	brne	.-18     	; 0x5c2 <led_shift+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <led_shift+0xb6>
 5d6:	c5 01       	movw	r24, r10
 5d8:	b4 01       	movw	r22, r8
 5da:	75 d1       	rcall	.+746    	; 0x8c6 <__fixunssfsi>
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <led_shift+0xb0>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	cb 01       	movw	r24, r22
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <led_shift+0xb2>

void led_shift(int _s) {
	
	// LED_SHIFT
	for (int j=0; j<3; j++) {
		for(int i=0; i<8; i++) {
 5e8:	21 96       	adiw	r28, 0x01	; 1
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <led_shift+0xbe>
 5ec:	c0 e0       	ldi	r28, 0x00	; 0
 5ee:	d0 e0       	ldi	r29, 0x00	; 0
 5f0:	c8 30       	cpi	r28, 0x08	; 8
 5f2:	d1 05       	cpc	r29, r1
 5f4:	0c f4       	brge	.+2      	; 0x5f8 <led_shift+0xc6>
 5f6:	af cf       	rjmp	.-162    	; 0x556 <led_shift+0x24>
 5f8:	c0 e0       	ldi	r28, 0x00	; 0
 5fa:	d0 e0       	ldi	r29, 0x00	; 0
 5fc:	4a c0       	rjmp	.+148    	; 0x692 <led_shift+0x160>
			if (i != 7) {
				_delay_ms(_s);
			}
		}
		for(int i=0; i<8; i++) {
			PORTC = ~(0x80 >> i);
 5fe:	80 e8       	ldi	r24, 0x80	; 128
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0c 2e       	mov	r0, r28
 604:	02 c0       	rjmp	.+4      	; 0x60a <led_shift+0xd8>
 606:	95 95       	asr	r25
 608:	87 95       	ror	r24
 60a:	0a 94       	dec	r0
 60c:	e2 f7       	brpl	.-8      	; 0x606 <led_shift+0xd4>
 60e:	80 95       	com	r24
 610:	88 b9       	out	0x08, r24	; 8
			if (i != 7) {
 612:	c7 30       	cpi	r28, 0x07	; 7
 614:	d1 05       	cpc	r29, r1
 616:	09 f4       	brne	.+2      	; 0x61a <led_shift+0xe8>
				_delay_ms(_s);
 618:	3b c0       	rjmp	.+118    	; 0x690 <led_shift+0x15e>
 61a:	b8 01       	movw	r22, r16
 61c:	01 2e       	mov	r0, r17
 61e:	00 0c       	add	r0, r0
 620:	88 0b       	sbc	r24, r24
 622:	99 0b       	sbc	r25, r25
 624:	7e d1       	rcall	.+764    	; 0x922 <__floatsisf>
 626:	2b 01       	movw	r4, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 628:	3c 01       	movw	r6, r24
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	4a e7       	ldi	r20, 0x7A	; 122
 630:	55 e4       	ldi	r21, 0x45	; 69
 632:	03 d2       	rcall	.+1030   	; 0xa3a <__mulsf3>
 634:	4b 01       	movw	r8, r22
	if (__tmp < 1.0)
 636:	5c 01       	movw	r10, r24
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	40 e8       	ldi	r20, 0x80	; 128
 63e:	5f e3       	ldi	r21, 0x3F	; 63
 640:	3e d1       	rcall	.+636    	; 0x8be <__cmpsf2>
 642:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 644:	04 f1       	brlt	.+64     	; 0x686 <led_shift+0x154>
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	3f ef       	ldi	r19, 0xFF	; 255
 64a:	4f e7       	ldi	r20, 0x7F	; 127
 64c:	57 e4       	ldi	r21, 0x47	; 71
 64e:	c5 01       	movw	r24, r10
 650:	b4 01       	movw	r22, r8
 652:	ef d1       	rcall	.+990    	; 0xa32 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 654:	18 16       	cp	r1, r24
 656:	9c f4       	brge	.+38     	; 0x67e <led_shift+0x14c>
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	40 e2       	ldi	r20, 0x20	; 32
 65e:	51 e4       	ldi	r21, 0x41	; 65
 660:	c3 01       	movw	r24, r6
 662:	b2 01       	movw	r22, r4
 664:	ea d1       	rcall	.+980    	; 0xa3a <__mulsf3>
 666:	2f d1       	rcall	.+606    	; 0x8c6 <__fixunssfsi>
 668:	06 c0       	rjmp	.+12     	; 0x676 <led_shift+0x144>
 66a:	80 e9       	ldi	r24, 0x90	; 144
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 670:	f1 f7       	brne	.-4      	; 0x66e <led_shift+0x13c>
 672:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 674:	71 09       	sbc	r23, r1
 676:	61 15       	cp	r22, r1
 678:	71 05       	cpc	r23, r1
 67a:	b9 f7       	brne	.-18     	; 0x66a <led_shift+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 67c:	09 c0       	rjmp	.+18     	; 0x690 <led_shift+0x15e>
 67e:	c5 01       	movw	r24, r10
 680:	b4 01       	movw	r22, r8
 682:	21 d1       	rcall	.+578    	; 0x8c6 <__fixunssfsi>
 684:	02 c0       	rjmp	.+4      	; 0x68a <led_shift+0x158>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	cb 01       	movw	r24, r22
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <led_shift+0x15a>
			PORTC = ~(0x01 << i);
			if (i != 7) {
				_delay_ms(_s);
			}
		}
		for(int i=0; i<8; i++) {
 690:	21 96       	adiw	r28, 0x01	; 1
 692:	c8 30       	cpi	r28, 0x08	; 8
 694:	d1 05       	cpc	r29, r1
 696:	0c f4       	brge	.+2      	; 0x69a <led_shift+0x168>
 698:	b2 cf       	rjmp	.-156    	; 0x5fe <led_shift+0xcc>
}

void led_shift(int _s) {
	
	// LED_SHIFT
	for (int j=0; j<3; j++) {
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	e8 1a       	sub	r14, r24
 69e:	f8 0a       	sbc	r15, r24
 6a0:	23 e0       	ldi	r18, 0x03	; 3
 6a2:	e2 16       	cp	r14, r18
 6a4:	f1 04       	cpc	r15, r1
 6a6:	0c f4       	brge	.+2      	; 0x6aa <led_shift+0x178>
 6a8:	a1 cf       	rjmp	.-190    	; 0x5ec <led_shift+0xba>
			if (i != 7) {
				_delay_ms(_s);
			}
		}
	}
}
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	ef 90       	pop	r14
 6b6:	bf 90       	pop	r11
 6b8:	af 90       	pop	r10
 6ba:	9f 90       	pop	r9
 6bc:	8f 90       	pop	r8
 6be:	7f 90       	pop	r7
 6c0:	6f 90       	pop	r6
 6c2:	5f 90       	pop	r5
 6c4:	4f 90       	pop	r4
 6c6:	08 95       	ret

000006c8 <tx_char>:

void tx_char(unsigned char txChar) {
	while(!(UCSR1A & 1<<UDRE1));
 6c8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 6cc:	95 ff       	sbrs	r25, 5
 6ce:	fc cf       	rjmp	.-8      	; 0x6c8 <tx_char>
	UDR1 = txChar;
 6d0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 6d4:	08 95       	ret

000006d6 <tx_str>:
}

void tx_str(unsigned char *txStr, int len) {
 6d6:	ef 92       	push	r14
 6d8:	ff 92       	push	r15
 6da:	0f 93       	push	r16
 6dc:	1f 93       	push	r17
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	7c 01       	movw	r14, r24
 6e4:	8b 01       	movw	r16, r22
	int i = 0;
	for(i=0; i<len; i++) {
 6e6:	c0 e0       	ldi	r28, 0x00	; 0
 6e8:	d0 e0       	ldi	r29, 0x00	; 0
 6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <tx_str+0x22>
		tx_char(txStr[i]);
 6ec:	f7 01       	movw	r30, r14
 6ee:	ec 0f       	add	r30, r28
 6f0:	fd 1f       	adc	r31, r29
 6f2:	80 81       	ld	r24, Z
 6f4:	e9 df       	rcall	.-46     	; 0x6c8 <tx_char>
	UDR1 = txChar;
}

void tx_str(unsigned char *txStr, int len) {
	int i = 0;
	for(i=0; i<len; i++) {
 6f6:	21 96       	adiw	r28, 0x01	; 1
 6f8:	c0 17       	cp	r28, r16
 6fa:	d1 07       	cpc	r29, r17
 6fc:	bc f3       	brlt	.-18     	; 0x6ec <tx_str+0x16>
		tx_char(txStr[i]);
	}
}
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	08 95       	ret

0000070c <__vector_36>:

ISR(USART1_RX_vect) {
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	0b b6       	in	r0, 0x3b	; 59
 718:	0f 92       	push	r0
 71a:	2f 93       	push	r18
 71c:	3f 93       	push	r19
 71e:	4f 93       	push	r20
 720:	5f 93       	push	r21
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	ef 93       	push	r30
 728:	ff 93       	push	r31
	cli();
 72a:	f8 94       	cli
	unsigned char _usart_rcv = 0;
	_usart_rcv = UDR1;
 72c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
	if(_usart_rcv == 0x0A || _usart_rcv == 0x0D || com_size >= BUF_SZ) {
 730:	8a 30       	cpi	r24, 0x0A	; 10
 732:	49 f0       	breq	.+18     	; 0x746 <__vector_36+0x3a>
 734:	8d 30       	cpi	r24, 0x0D	; 13
 736:	39 f0       	breq	.+14     	; 0x746 <__vector_36+0x3a>
 738:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <com_size>
 73c:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <com_size+0x1>
 740:	24 36       	cpi	r18, 0x64	; 100
 742:	31 05       	cpc	r19, r1
 744:	38 f0       	brcs	.+14     	; 0x754 <__vector_36+0x48>
		sint_flag = 1;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 74e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
 752:	0b c0       	rjmp	.+22     	; 0x76a <__vector_36+0x5e>
	}
	else {
		buf[com_size++] = _usart_rcv;
 754:	a9 01       	movw	r20, r18
 756:	4f 5f       	subi	r20, 0xFF	; 255
 758:	5f 4f       	sbci	r21, 0xFF	; 255
 75a:	50 93 21 02 	sts	0x0221, r21	; 0x800221 <com_size+0x1>
 75e:	40 93 20 02 	sts	0x0220, r20	; 0x800220 <com_size>
 762:	f9 01       	movw	r30, r18
 764:	ee 5d       	subi	r30, 0xDE	; 222
 766:	fd 4f       	sbci	r31, 0xFD	; 253
 768:	80 83       	st	Z, r24
	}
	sei();
 76a:	78 94       	sei
}
 76c:	ff 91       	pop	r31
 76e:	ef 91       	pop	r30
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	0f 90       	pop	r0
 77e:	0b be       	out	0x3b, r0	; 59
 780:	0f 90       	pop	r0
 782:	0f be       	out	0x3f, r0	; 63
 784:	0f 90       	pop	r0
 786:	1f 90       	pop	r1
 788:	18 95       	reti

0000078a <command>:

void command(uint8_t *buff, uint8_t len) {
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
 796:	c4 56       	subi	r28, 0x64	; 100
 798:	d1 09       	sbc	r29, r1
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	f8 94       	cli
 79e:	de bf       	out	0x3e, r29	; 62
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	cd bf       	out	0x3d, r28	; 61
	uint8_t tmp[BUF_SZ];
	uint8_t ret = 0;
	memset(tmp, '\0', BUF_SZ);
 7a4:	8e 01       	movw	r16, r28
 7a6:	0f 5f       	subi	r16, 0xFF	; 255
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	24 e6       	ldi	r18, 0x64	; 100
 7ac:	f8 01       	movw	r30, r16
 7ae:	11 92       	st	Z+, r1
 7b0:	2a 95       	dec	r18
 7b2:	e9 f7       	brne	.-6      	; 0x7ae <command+0x24>
	memcpy((uint8_t*)tmp, (uint8_t*)buff, len);
 7b4:	46 2f       	mov	r20, r22
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	bc 01       	movw	r22, r24
 7ba:	c8 01       	movw	r24, r16
 7bc:	c9 d1       	rcall	.+914    	; 0xb50 <memcpy>
	if(strstr((char*)tmp, "LED_ON_OFF") != NULL) {
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	72 e0       	ldi	r23, 0x02	; 2
 7c2:	c8 01       	movw	r24, r16
 7c4:	ce d1       	rcall	.+924    	; 0xb62 <strstr>
 7c6:	89 2b       	or	r24, r25
 7c8:	59 f0       	breq	.+22     	; 0x7e0 <command+0x56>
		tx_str(buf, com_size);
 7ca:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <com_size>
 7ce:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <com_size+0x1>
 7d2:	82 e2       	ldi	r24, 0x22	; 34
 7d4:	92 e0       	ldi	r25, 0x02	; 2
 7d6:	7f df       	rcall	.-258    	; 0x6d6 <tx_str>
		led_all_onoff(100);
 7d8:	84 e6       	ldi	r24, 0x64	; 100
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	a3 dc       	rcall	.-1722   	; 0x124 <led_all_onoff>
 7de:	23 c0       	rjmp	.+70     	; 0x826 <command+0x9c>
 7e0:	6b e0       	ldi	r22, 0x0B	; 11
	}
	else if (strstr((char*)tmp, "LED_ALT") != NULL){
 7e2:	72 e0       	ldi	r23, 0x02	; 2
 7e4:	ce 01       	movw	r24, r28
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	bc d1       	rcall	.+888    	; 0xb62 <strstr>
 7ea:	89 2b       	or	r24, r25
 7ec:	59 f0       	breq	.+22     	; 0x804 <command+0x7a>
 7ee:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <com_size>
		tx_str(buf, com_size);
 7f2:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <com_size+0x1>
 7f6:	82 e2       	ldi	r24, 0x22	; 34
 7f8:	92 e0       	ldi	r25, 0x02	; 2
 7fa:	6d df       	rcall	.-294    	; 0x6d6 <tx_str>
		led_alternating(100);
 7fc:	84 e6       	ldi	r24, 0x64	; 100
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	1f dd       	rcall	.-1474   	; 0x240 <led_alternating>
 802:	11 c0       	rjmp	.+34     	; 0x826 <command+0x9c>
	}
	else if (strstr((char*)tmp, "LED_SHIFT") != NULL){
 804:	63 e1       	ldi	r22, 0x13	; 19
 806:	72 e0       	ldi	r23, 0x02	; 2
 808:	ce 01       	movw	r24, r28
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	aa d1       	rcall	.+852    	; 0xb62 <strstr>
 80e:	89 2b       	or	r24, r25
 810:	51 f0       	breq	.+20     	; 0x826 <command+0x9c>
		tx_str(buf, com_size);
 812:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <com_size>
 816:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <com_size+0x1>
 81a:	82 e2       	ldi	r24, 0x22	; 34
 81c:	92 e0       	ldi	r25, 0x02	; 2
 81e:	5b df       	rcall	.-330    	; 0x6d6 <tx_str>
		led_shift(100);
 820:	84 e6       	ldi	r24, 0x64	; 100
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	86 de       	rcall	.-756    	; 0x532 <led_shift>
 826:	cc 59       	subi	r28, 0x9C	; 156
	}
	else {
		//tx_str(buf, com_size);
	}
}
 828:	df 4f       	sbci	r29, 0xFF	; 255
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	f8 94       	cli
 82e:	de bf       	out	0x3e, r29	; 62
 830:	0f be       	out	0x3f, r0	; 63
 832:	cd bf       	out	0x3d, r28	; 61
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	08 95       	ret

0000083e <main>:
 83e:	f8 94       	cli
int main(void)
{
    /* Replace with your application code */
	
	cli();
	DDRE &= ~(0x30);
 840:	8d b1       	in	r24, 0x0d	; 13
 842:	8f 7c       	andi	r24, 0xCF	; 207
 844:	8d b9       	out	0x0d, r24	; 13
	EICRB = 0x0F;
 846:	8f e0       	ldi	r24, 0x0F	; 15
 848:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
	EIMSK = 0x30;
 84c:	80 e3       	ldi	r24, 0x30	; 48
 84e:	8d bb       	out	0x1d, r24	; 29
	EIFR |= 0x30;
 850:	8c b3       	in	r24, 0x1c	; 28
 852:	80 63       	ori	r24, 0x30	; 48
 854:	8c bb       	out	0x1c, r24	; 28
	
	UBRR1H = (unsigned char) (BAUD_9600 >> 8);
 856:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
	UBRR1L = (unsigned char) BAUD_9600;
 85a:	87 e6       	ldi	r24, 0x67	; 103
 85c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
	UCSR1B = (1 << TXEN1) | (1 << RXEN1);
 860:	e9 ec       	ldi	r30, 0xC9	; 201
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	88 e1       	ldi	r24, 0x18	; 24
 866:	80 83       	st	Z, r24
	UCSR1B |= (1<<RXCIE1);
 868:	80 81       	ld	r24, Z
 86a:	80 68       	ori	r24, 0x80	; 128
 86c:	80 83       	st	Z, r24
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);
 86e:	86 e0       	ldi	r24, 0x06	; 6
 870:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
	sei();
 874:	78 94       	sei
	
	DDRC = 0xFF;
 876:	8f ef       	ldi	r24, 0xFF	; 255
 878:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xFF;
 87a:	88 b9       	out	0x08, r24	; 8
	
    while (1) 
    {
		// led_all_onoff(200);
		
		if(sint_flag) {
 87c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 880:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 884:	89 2b       	or	r24, r25
 886:	d1 f3       	breq	.-12     	; 0x87c <main+0x3e>
			buf[com_size] = '\0';
 888:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <com_size>
 88c:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <com_size+0x1>
 890:	fb 01       	movw	r30, r22
 892:	ee 5d       	subi	r30, 0xDE	; 222
 894:	fd 4f       	sbci	r31, 0xFD	; 253
 896:	10 82       	st	Z, r1
			command(buf, com_size);
 898:	82 e2       	ldi	r24, 0x22	; 34
 89a:	92 e0       	ldi	r25, 0x02	; 2
 89c:	76 df       	rcall	.-276    	; 0x78a <command>
			com_size = 0;
 89e:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <com_size+0x1>
 8a2:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <com_size>
			memset(buf, '\0', 100);
 8a6:	84 e6       	ldi	r24, 0x64	; 100
 8a8:	e2 e2       	ldi	r30, 0x22	; 34
 8aa:	f2 e0       	ldi	r31, 0x02	; 2
 8ac:	df 01       	movw	r26, r30
 8ae:	1d 92       	st	X+, r1
 8b0:	8a 95       	dec	r24
 8b2:	e9 f7       	brne	.-6      	; 0x8ae <main+0x70>
			sint_flag = 0;
 8b4:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <__data_end+0x1>
 8b8:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__data_end>
 8bc:	df cf       	rjmp	.-66     	; 0x87c <main+0x3e>

000008be <__cmpsf2>:
 8be:	6c d0       	rcall	.+216    	; 0x998 <__fp_cmp>
 8c0:	08 f4       	brcc	.+2      	; 0x8c4 <__cmpsf2+0x6>
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	08 95       	ret

000008c6 <__fixunssfsi>:
 8c6:	94 d0       	rcall	.+296    	; 0x9f0 <__fp_splitA>
 8c8:	88 f0       	brcs	.+34     	; 0x8ec <__fixunssfsi+0x26>
 8ca:	9f 57       	subi	r25, 0x7F	; 127
 8cc:	90 f0       	brcs	.+36     	; 0x8f2 <__fixunssfsi+0x2c>
 8ce:	b9 2f       	mov	r27, r25
 8d0:	99 27       	eor	r25, r25
 8d2:	b7 51       	subi	r27, 0x17	; 23
 8d4:	a0 f0       	brcs	.+40     	; 0x8fe <__fixunssfsi+0x38>
 8d6:	d1 f0       	breq	.+52     	; 0x90c <__fixunssfsi+0x46>
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	1a f0       	brmi	.+6      	; 0x8e8 <__fixunssfsi+0x22>
 8e2:	ba 95       	dec	r27
 8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__fixunssfsi+0x12>
 8e6:	12 c0       	rjmp	.+36     	; 0x90c <__fixunssfsi+0x46>
 8e8:	b1 30       	cpi	r27, 0x01	; 1
 8ea:	81 f0       	breq	.+32     	; 0x90c <__fixunssfsi+0x46>
 8ec:	9b d0       	rcall	.+310    	; 0xa24 <__fp_zero>
 8ee:	b1 e0       	ldi	r27, 0x01	; 1
 8f0:	08 95       	ret
 8f2:	98 c0       	rjmp	.+304    	; 0xa24 <__fp_zero>
 8f4:	67 2f       	mov	r22, r23
 8f6:	78 2f       	mov	r23, r24
 8f8:	88 27       	eor	r24, r24
 8fa:	b8 5f       	subi	r27, 0xF8	; 248
 8fc:	39 f0       	breq	.+14     	; 0x90c <__fixunssfsi+0x46>
 8fe:	b9 3f       	cpi	r27, 0xF9	; 249
 900:	cc f3       	brlt	.-14     	; 0x8f4 <__fixunssfsi+0x2e>
 902:	86 95       	lsr	r24
 904:	77 95       	ror	r23
 906:	67 95       	ror	r22
 908:	b3 95       	inc	r27
 90a:	d9 f7       	brne	.-10     	; 0x902 <__fixunssfsi+0x3c>
 90c:	3e f4       	brtc	.+14     	; 0x91c <__fixunssfsi+0x56>
 90e:	90 95       	com	r25
 910:	80 95       	com	r24
 912:	70 95       	com	r23
 914:	61 95       	neg	r22
 916:	7f 4f       	sbci	r23, 0xFF	; 255
 918:	8f 4f       	sbci	r24, 0xFF	; 255
 91a:	9f 4f       	sbci	r25, 0xFF	; 255
 91c:	08 95       	ret

0000091e <__floatunsisf>:
 91e:	e8 94       	clt
 920:	09 c0       	rjmp	.+18     	; 0x934 <__floatsisf+0x12>

00000922 <__floatsisf>:
 922:	97 fb       	bst	r25, 7
 924:	3e f4       	brtc	.+14     	; 0x934 <__floatsisf+0x12>
 926:	90 95       	com	r25
 928:	80 95       	com	r24
 92a:	70 95       	com	r23
 92c:	61 95       	neg	r22
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	99 23       	and	r25, r25
 936:	a9 f0       	breq	.+42     	; 0x962 <__floatsisf+0x40>
 938:	f9 2f       	mov	r31, r25
 93a:	96 e9       	ldi	r25, 0x96	; 150
 93c:	bb 27       	eor	r27, r27
 93e:	93 95       	inc	r25
 940:	f6 95       	lsr	r31
 942:	87 95       	ror	r24
 944:	77 95       	ror	r23
 946:	67 95       	ror	r22
 948:	b7 95       	ror	r27
 94a:	f1 11       	cpse	r31, r1
 94c:	f8 cf       	rjmp	.-16     	; 0x93e <__floatsisf+0x1c>
 94e:	fa f4       	brpl	.+62     	; 0x98e <__floatsisf+0x6c>
 950:	bb 0f       	add	r27, r27
 952:	11 f4       	brne	.+4      	; 0x958 <__floatsisf+0x36>
 954:	60 ff       	sbrs	r22, 0
 956:	1b c0       	rjmp	.+54     	; 0x98e <__floatsisf+0x6c>
 958:	6f 5f       	subi	r22, 0xFF	; 255
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	8f 4f       	sbci	r24, 0xFF	; 255
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	16 c0       	rjmp	.+44     	; 0x98e <__floatsisf+0x6c>
 962:	88 23       	and	r24, r24
 964:	11 f0       	breq	.+4      	; 0x96a <__floatsisf+0x48>
 966:	96 e9       	ldi	r25, 0x96	; 150
 968:	11 c0       	rjmp	.+34     	; 0x98c <__floatsisf+0x6a>
 96a:	77 23       	and	r23, r23
 96c:	21 f0       	breq	.+8      	; 0x976 <__floatsisf+0x54>
 96e:	9e e8       	ldi	r25, 0x8E	; 142
 970:	87 2f       	mov	r24, r23
 972:	76 2f       	mov	r23, r22
 974:	05 c0       	rjmp	.+10     	; 0x980 <__floatsisf+0x5e>
 976:	66 23       	and	r22, r22
 978:	71 f0       	breq	.+28     	; 0x996 <__floatsisf+0x74>
 97a:	96 e8       	ldi	r25, 0x86	; 134
 97c:	86 2f       	mov	r24, r22
 97e:	70 e0       	ldi	r23, 0x00	; 0
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	2a f0       	brmi	.+10     	; 0x98e <__floatsisf+0x6c>
 984:	9a 95       	dec	r25
 986:	66 0f       	add	r22, r22
 988:	77 1f       	adc	r23, r23
 98a:	88 1f       	adc	r24, r24
 98c:	da f7       	brpl	.-10     	; 0x984 <__floatsisf+0x62>
 98e:	88 0f       	add	r24, r24
 990:	96 95       	lsr	r25
 992:	87 95       	ror	r24
 994:	97 f9       	bld	r25, 7
 996:	08 95       	ret

00000998 <__fp_cmp>:
 998:	99 0f       	add	r25, r25
 99a:	00 08       	sbc	r0, r0
 99c:	55 0f       	add	r21, r21
 99e:	aa 0b       	sbc	r26, r26
 9a0:	e0 e8       	ldi	r30, 0x80	; 128
 9a2:	fe ef       	ldi	r31, 0xFE	; 254
 9a4:	16 16       	cp	r1, r22
 9a6:	17 06       	cpc	r1, r23
 9a8:	e8 07       	cpc	r30, r24
 9aa:	f9 07       	cpc	r31, r25
 9ac:	c0 f0       	brcs	.+48     	; 0x9de <__fp_cmp+0x46>
 9ae:	12 16       	cp	r1, r18
 9b0:	13 06       	cpc	r1, r19
 9b2:	e4 07       	cpc	r30, r20
 9b4:	f5 07       	cpc	r31, r21
 9b6:	98 f0       	brcs	.+38     	; 0x9de <__fp_cmp+0x46>
 9b8:	62 1b       	sub	r22, r18
 9ba:	73 0b       	sbc	r23, r19
 9bc:	84 0b       	sbc	r24, r20
 9be:	95 0b       	sbc	r25, r21
 9c0:	39 f4       	brne	.+14     	; 0x9d0 <__fp_cmp+0x38>
 9c2:	0a 26       	eor	r0, r26
 9c4:	61 f0       	breq	.+24     	; 0x9de <__fp_cmp+0x46>
 9c6:	23 2b       	or	r18, r19
 9c8:	24 2b       	or	r18, r20
 9ca:	25 2b       	or	r18, r21
 9cc:	21 f4       	brne	.+8      	; 0x9d6 <__fp_cmp+0x3e>
 9ce:	08 95       	ret
 9d0:	0a 26       	eor	r0, r26
 9d2:	09 f4       	brne	.+2      	; 0x9d6 <__fp_cmp+0x3e>
 9d4:	a1 40       	sbci	r26, 0x01	; 1
 9d6:	a6 95       	lsr	r26
 9d8:	8f ef       	ldi	r24, 0xFF	; 255
 9da:	81 1d       	adc	r24, r1
 9dc:	81 1d       	adc	r24, r1
 9de:	08 95       	ret

000009e0 <__fp_split3>:
 9e0:	57 fd       	sbrc	r21, 7
 9e2:	90 58       	subi	r25, 0x80	; 128
 9e4:	44 0f       	add	r20, r20
 9e6:	55 1f       	adc	r21, r21
 9e8:	59 f0       	breq	.+22     	; 0xa00 <__fp_splitA+0x10>
 9ea:	5f 3f       	cpi	r21, 0xFF	; 255
 9ec:	71 f0       	breq	.+28     	; 0xa0a <__fp_splitA+0x1a>
 9ee:	47 95       	ror	r20

000009f0 <__fp_splitA>:
 9f0:	88 0f       	add	r24, r24
 9f2:	97 fb       	bst	r25, 7
 9f4:	99 1f       	adc	r25, r25
 9f6:	61 f0       	breq	.+24     	; 0xa10 <__fp_splitA+0x20>
 9f8:	9f 3f       	cpi	r25, 0xFF	; 255
 9fa:	79 f0       	breq	.+30     	; 0xa1a <__fp_splitA+0x2a>
 9fc:	87 95       	ror	r24
 9fe:	08 95       	ret
 a00:	12 16       	cp	r1, r18
 a02:	13 06       	cpc	r1, r19
 a04:	14 06       	cpc	r1, r20
 a06:	55 1f       	adc	r21, r21
 a08:	f2 cf       	rjmp	.-28     	; 0x9ee <__fp_split3+0xe>
 a0a:	46 95       	lsr	r20
 a0c:	f1 df       	rcall	.-30     	; 0x9f0 <__fp_splitA>
 a0e:	08 c0       	rjmp	.+16     	; 0xa20 <__fp_splitA+0x30>
 a10:	16 16       	cp	r1, r22
 a12:	17 06       	cpc	r1, r23
 a14:	18 06       	cpc	r1, r24
 a16:	99 1f       	adc	r25, r25
 a18:	f1 cf       	rjmp	.-30     	; 0x9fc <__fp_splitA+0xc>
 a1a:	86 95       	lsr	r24
 a1c:	71 05       	cpc	r23, r1
 a1e:	61 05       	cpc	r22, r1
 a20:	08 94       	sec
 a22:	08 95       	ret

00000a24 <__fp_zero>:
 a24:	e8 94       	clt

00000a26 <__fp_szero>:
 a26:	bb 27       	eor	r27, r27
 a28:	66 27       	eor	r22, r22
 a2a:	77 27       	eor	r23, r23
 a2c:	cb 01       	movw	r24, r22
 a2e:	97 f9       	bld	r25, 7
 a30:	08 95       	ret

00000a32 <__gesf2>:
 a32:	b2 df       	rcall	.-156    	; 0x998 <__fp_cmp>
 a34:	08 f4       	brcc	.+2      	; 0xa38 <__gesf2+0x6>
 a36:	8f ef       	ldi	r24, 0xFF	; 255
 a38:	08 95       	ret

00000a3a <__mulsf3>:
 a3a:	0b d0       	rcall	.+22     	; 0xa52 <__mulsf3x>
 a3c:	78 c0       	rjmp	.+240    	; 0xb2e <__fp_round>
 a3e:	69 d0       	rcall	.+210    	; 0xb12 <__fp_pscA>
 a40:	28 f0       	brcs	.+10     	; 0xa4c <__mulsf3+0x12>
 a42:	6e d0       	rcall	.+220    	; 0xb20 <__fp_pscB>
 a44:	18 f0       	brcs	.+6      	; 0xa4c <__mulsf3+0x12>
 a46:	95 23       	and	r25, r21
 a48:	09 f0       	breq	.+2      	; 0xa4c <__mulsf3+0x12>
 a4a:	5a c0       	rjmp	.+180    	; 0xb00 <__fp_inf>
 a4c:	5f c0       	rjmp	.+190    	; 0xb0c <__fp_nan>
 a4e:	11 24       	eor	r1, r1
 a50:	ea cf       	rjmp	.-44     	; 0xa26 <__fp_szero>

00000a52 <__mulsf3x>:
 a52:	c6 df       	rcall	.-116    	; 0x9e0 <__fp_split3>
 a54:	a0 f3       	brcs	.-24     	; 0xa3e <__mulsf3+0x4>

00000a56 <__mulsf3_pse>:
 a56:	95 9f       	mul	r25, r21
 a58:	d1 f3       	breq	.-12     	; 0xa4e <__mulsf3+0x14>
 a5a:	95 0f       	add	r25, r21
 a5c:	50 e0       	ldi	r21, 0x00	; 0
 a5e:	55 1f       	adc	r21, r21
 a60:	62 9f       	mul	r22, r18
 a62:	f0 01       	movw	r30, r0
 a64:	72 9f       	mul	r23, r18
 a66:	bb 27       	eor	r27, r27
 a68:	f0 0d       	add	r31, r0
 a6a:	b1 1d       	adc	r27, r1
 a6c:	63 9f       	mul	r22, r19
 a6e:	aa 27       	eor	r26, r26
 a70:	f0 0d       	add	r31, r0
 a72:	b1 1d       	adc	r27, r1
 a74:	aa 1f       	adc	r26, r26
 a76:	64 9f       	mul	r22, r20
 a78:	66 27       	eor	r22, r22
 a7a:	b0 0d       	add	r27, r0
 a7c:	a1 1d       	adc	r26, r1
 a7e:	66 1f       	adc	r22, r22
 a80:	82 9f       	mul	r24, r18
 a82:	22 27       	eor	r18, r18
 a84:	b0 0d       	add	r27, r0
 a86:	a1 1d       	adc	r26, r1
 a88:	62 1f       	adc	r22, r18
 a8a:	73 9f       	mul	r23, r19
 a8c:	b0 0d       	add	r27, r0
 a8e:	a1 1d       	adc	r26, r1
 a90:	62 1f       	adc	r22, r18
 a92:	83 9f       	mul	r24, r19
 a94:	a0 0d       	add	r26, r0
 a96:	61 1d       	adc	r22, r1
 a98:	22 1f       	adc	r18, r18
 a9a:	74 9f       	mul	r23, r20
 a9c:	33 27       	eor	r19, r19
 a9e:	a0 0d       	add	r26, r0
 aa0:	61 1d       	adc	r22, r1
 aa2:	23 1f       	adc	r18, r19
 aa4:	84 9f       	mul	r24, r20
 aa6:	60 0d       	add	r22, r0
 aa8:	21 1d       	adc	r18, r1
 aaa:	82 2f       	mov	r24, r18
 aac:	76 2f       	mov	r23, r22
 aae:	6a 2f       	mov	r22, r26
 ab0:	11 24       	eor	r1, r1
 ab2:	9f 57       	subi	r25, 0x7F	; 127
 ab4:	50 40       	sbci	r21, 0x00	; 0
 ab6:	8a f0       	brmi	.+34     	; 0xada <__mulsf3_pse+0x84>
 ab8:	e1 f0       	breq	.+56     	; 0xaf2 <__mulsf3_pse+0x9c>
 aba:	88 23       	and	r24, r24
 abc:	4a f0       	brmi	.+18     	; 0xad0 <__mulsf3_pse+0x7a>
 abe:	ee 0f       	add	r30, r30
 ac0:	ff 1f       	adc	r31, r31
 ac2:	bb 1f       	adc	r27, r27
 ac4:	66 1f       	adc	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	91 50       	subi	r25, 0x01	; 1
 acc:	50 40       	sbci	r21, 0x00	; 0
 ace:	a9 f7       	brne	.-22     	; 0xaba <__mulsf3_pse+0x64>
 ad0:	9e 3f       	cpi	r25, 0xFE	; 254
 ad2:	51 05       	cpc	r21, r1
 ad4:	70 f0       	brcs	.+28     	; 0xaf2 <__mulsf3_pse+0x9c>
 ad6:	14 c0       	rjmp	.+40     	; 0xb00 <__fp_inf>
 ad8:	a6 cf       	rjmp	.-180    	; 0xa26 <__fp_szero>
 ada:	5f 3f       	cpi	r21, 0xFF	; 255
 adc:	ec f3       	brlt	.-6      	; 0xad8 <__mulsf3_pse+0x82>
 ade:	98 3e       	cpi	r25, 0xE8	; 232
 ae0:	dc f3       	brlt	.-10     	; 0xad8 <__mulsf3_pse+0x82>
 ae2:	86 95       	lsr	r24
 ae4:	77 95       	ror	r23
 ae6:	67 95       	ror	r22
 ae8:	b7 95       	ror	r27
 aea:	f7 95       	ror	r31
 aec:	e7 95       	ror	r30
 aee:	9f 5f       	subi	r25, 0xFF	; 255
 af0:	c1 f7       	brne	.-16     	; 0xae2 <__mulsf3_pse+0x8c>
 af2:	fe 2b       	or	r31, r30
 af4:	88 0f       	add	r24, r24
 af6:	91 1d       	adc	r25, r1
 af8:	96 95       	lsr	r25
 afa:	87 95       	ror	r24
 afc:	97 f9       	bld	r25, 7
 afe:	08 95       	ret

00000b00 <__fp_inf>:
 b00:	97 f9       	bld	r25, 7
 b02:	9f 67       	ori	r25, 0x7F	; 127
 b04:	80 e8       	ldi	r24, 0x80	; 128
 b06:	70 e0       	ldi	r23, 0x00	; 0
 b08:	60 e0       	ldi	r22, 0x00	; 0
 b0a:	08 95       	ret

00000b0c <__fp_nan>:
 b0c:	9f ef       	ldi	r25, 0xFF	; 255
 b0e:	80 ec       	ldi	r24, 0xC0	; 192
 b10:	08 95       	ret

00000b12 <__fp_pscA>:
 b12:	00 24       	eor	r0, r0
 b14:	0a 94       	dec	r0
 b16:	16 16       	cp	r1, r22
 b18:	17 06       	cpc	r1, r23
 b1a:	18 06       	cpc	r1, r24
 b1c:	09 06       	cpc	r0, r25
 b1e:	08 95       	ret

00000b20 <__fp_pscB>:
 b20:	00 24       	eor	r0, r0
 b22:	0a 94       	dec	r0
 b24:	12 16       	cp	r1, r18
 b26:	13 06       	cpc	r1, r19
 b28:	14 06       	cpc	r1, r20
 b2a:	05 06       	cpc	r0, r21
 b2c:	08 95       	ret

00000b2e <__fp_round>:
 b2e:	09 2e       	mov	r0, r25
 b30:	03 94       	inc	r0
 b32:	00 0c       	add	r0, r0
 b34:	11 f4       	brne	.+4      	; 0xb3a <__fp_round+0xc>
 b36:	88 23       	and	r24, r24
 b38:	52 f0       	brmi	.+20     	; 0xb4e <__fp_round+0x20>
 b3a:	bb 0f       	add	r27, r27
 b3c:	40 f4       	brcc	.+16     	; 0xb4e <__fp_round+0x20>
 b3e:	bf 2b       	or	r27, r31
 b40:	11 f4       	brne	.+4      	; 0xb46 <__fp_round+0x18>
 b42:	60 ff       	sbrs	r22, 0
 b44:	04 c0       	rjmp	.+8      	; 0xb4e <__fp_round+0x20>
 b46:	6f 5f       	subi	r22, 0xFF	; 255
 b48:	7f 4f       	sbci	r23, 0xFF	; 255
 b4a:	8f 4f       	sbci	r24, 0xFF	; 255
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	08 95       	ret

00000b50 <memcpy>:
 b50:	fb 01       	movw	r30, r22
 b52:	dc 01       	movw	r26, r24
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <memcpy+0xa>
 b56:	01 90       	ld	r0, Z+
 b58:	0d 92       	st	X+, r0
 b5a:	41 50       	subi	r20, 0x01	; 1
 b5c:	50 40       	sbci	r21, 0x00	; 0
 b5e:	d8 f7       	brcc	.-10     	; 0xb56 <memcpy+0x6>
 b60:	08 95       	ret

00000b62 <strstr>:
 b62:	fb 01       	movw	r30, r22
 b64:	51 91       	ld	r21, Z+
 b66:	55 23       	and	r21, r21
 b68:	a9 f0       	breq	.+42     	; 0xb94 <strstr+0x32>
 b6a:	bf 01       	movw	r22, r30
 b6c:	dc 01       	movw	r26, r24
 b6e:	4d 91       	ld	r20, X+
 b70:	45 17       	cp	r20, r21
 b72:	41 11       	cpse	r20, r1
 b74:	e1 f7       	brne	.-8      	; 0xb6e <strstr+0xc>
 b76:	59 f4       	brne	.+22     	; 0xb8e <strstr+0x2c>
 b78:	cd 01       	movw	r24, r26
 b7a:	01 90       	ld	r0, Z+
 b7c:	00 20       	and	r0, r0
 b7e:	49 f0       	breq	.+18     	; 0xb92 <strstr+0x30>
 b80:	4d 91       	ld	r20, X+
 b82:	40 15       	cp	r20, r0
 b84:	41 11       	cpse	r20, r1
 b86:	c9 f3       	breq	.-14     	; 0xb7a <strstr+0x18>
 b88:	fb 01       	movw	r30, r22
 b8a:	41 11       	cpse	r20, r1
 b8c:	ef cf       	rjmp	.-34     	; 0xb6c <strstr+0xa>
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	01 97       	sbiw	r24, 0x01	; 1
 b94:	08 95       	ret

00000b96 <_exit>:
 b96:	f8 94       	cli

00000b98 <__stop_program>:
 b98:	ff cf       	rjmp	.-2      	; 0xb98 <__stop_program>
